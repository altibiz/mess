@page "/app/account"

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@if (_user is null) {
  return;
}
else if (_legalEntityPart != null && _user != null){
  <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex" Style="float: left;">
  <MudStack>
    <MudPaper Class="pa-4">
      @T["Korisničko ime"]: @_user.UserName
    </MudPaper>
    <MudPaper Class="pa-4">
      @T["Korisnički Email"]: @_user.Email
    </MudPaper>
    <MudPaper Class="pa-4">
      @T["Ime"]: @_legalEntityPart.Name.Text
    </MudPaper>
    <MudPaper Class="pa-4">
      @T["Email"]: @_legalEntityPart.Email.Text
    </MudPaper>
    <MudPaper Class="pa-4">
      @T["Grad"]: @_legalEntityPart.PostalCode.Text @_legalEntityPart.City.Text
    </MudPaper>
    <MudPaper Class="pa-4">
      @T["OIB"]: @_legalEntityPart.SocialSecurityNumber.Text
    </MudPaper>
  </MudStack>
  </MudContainer>
}

@code {
    private User? _user;
    private LegalEntityPart? _legalEntityPart;
    private ContentItem? _legalEntity;

    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
        _user = await this.GetAuthenticatedOrchardCoreUserAsync();

        _legalEntity = await session
          .Query<ContentItem, UserPickerFieldIndex>()
          .Where(index => index.ContentPart == "LegalEntityPart")
          .Where(index => index.SelectedUserId == _user.UserId)
          .FirstOrDefaultAsync();

        _legalEntityPart = _legalEntity.As<LegalEntityPart>();
      });
  }
}

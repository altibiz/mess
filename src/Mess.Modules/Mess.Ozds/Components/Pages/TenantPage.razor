@page "/app/tenant/{entityId}"

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@if (_user is null && EntityId is null) {
  return;
}
else if (_legalEntityPart != null){
  <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex  flex-column" Style="float: left;">
    <MudText Class="d-flex align-center my-2" Typo="@Typo.h5">@_legalEntityPart.Name.Text</MudText>
    <MudPaper class="mt-2 px-4 py-2">
      <MudGrid Spacing="3">

        <MudItem xs="12" sm="6">
          <MudText Typo="Typo.body1" Style="font-weight: bold;">
          @T["Email"]:
          </MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Type="Typo.body2" Align="MudAlign.Right">
              @_legalEntityPart.Email.Text
            </MudText>
          </MudHidden>
          <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudText Type="Typo.body2" Align="MudAlign.Left">
              @_legalEntityPart.Email.Text
            </MudText>
          </MudHidden>
        </MudItem>

        <MudItem xs="12" sm="6">
          <MudText Typo="Typo.body1" Style="font-weight: bold;">
          @T["Grad"]:
          </MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Type="Typo.body2" Align="MudAlign.Right">
              @_legalEntityPart.PostalCode.Text @_legalEntityPart.City.Text
            </MudText>
          </MudHidden>
          <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudText Type="Typo.body2" Align="MudAlign.Left">
              @_legalEntityPart.PostalCode.Text @_legalEntityPart.City.Text
            </MudText>
          </MudHidden>
        </MudItem>

        <MudItem xs="12" sm="6">
          <MudText Typo="Typo.body1" Style="font-weight: bold;">
          @T["OIB"]:
          </MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Type="Typo.body2" Align="MudAlign.Right">
              @_legalEntityPart.SocialSecurityNumber.Text
            </MudText>
          </MudHidden>
          <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudText Type="Typo.body2" Align="MudAlign.Left">
              @_legalEntityPart.SocialSecurityNumber.Text
            </MudText>
          </MudHidden>
        </MudItem>

      </MudGrid>
    </MudPaper>
  </MudContainer>
}

@code {
    [Parameter]
    public string? EntityId {get; set;}
    private User? _user;
    private LegalEntityPart? _legalEntityPart;
    private ContentItem? _legalEntity;

    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
        if(EntityId == null){
          _user = await this.GetAuthenticatedOrchardCoreUserAsync();

          _legalEntity = await session
            .Query<ContentItem, UserPickerFieldIndex>()
            .Where(index => index.ContentPart == "LegalEntityPart")
            .Where(index => index.SelectedUserId == _user.UserId)
            .FirstOrDefaultAsync();

          _legalEntityPart = _legalEntity.As<LegalEntityPart>();
        }
        else{
          _legalEntity = await session
            .Query<ContentItem, UserPickerFieldIndex>()
            .Where(index => index.ContentPart == "LegalEntityPart")
            .Where(index => index.ContentItemId == EntityId)
            .FirstOrDefaultAsync();

          _legalEntityPart = _legalEntity.As<LegalEntityPart>();
        }
      });
  }
}

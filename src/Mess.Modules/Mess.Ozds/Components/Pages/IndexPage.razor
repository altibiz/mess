@page "/app"

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL

@inject ISession _session

@if (_user is null) {
  return;
}

@if (_user.RoleNames.Contains("Administrator")) {
  <Meters />
  <Units />
  <Systems />
  <Operators />
}

@if (_legalEntity is null) {
  return;
}

@if (_user.RoleNames.Contains("DistributionSystemUnitRepresentative")) {
  <Meters Where="x => x.DistributionSystemUnitContentItemId == _legalEntity.ContentItemId" />
}
@if (_user.RoleNames.Contains("ClosedDistributionSystemRepresentative")) {
  <Meters Where="x => x.ClosedDistributionSystemContentItemId == _legalEntity.ContentItemId" />
  <Units Where="x => x.ClosedDistributionSystemContentItemId == _legalEntity.ContentItemId" />
}
@if (_user.RoleNames.Contains("DistributionSystemOperatorRepresentative")) {
  <Meters Where="x => x.DistributionSystemOperatorContentItemId == _legalEntity.ContentItemId" />
  <Units Where="x => x.DistributionSystemOperatorContentItemId == _legalEntity.ContentItemId" />
  <Systems Where="x => x.DistributionSystemOperatorContentItemId == _legalEntity.ContentItemId" />
}

@code {
  private User? _user;

  private ContentItem? _legalEntity;

  protected override async Task OnInitializedAsync()
  {
    _user = await this.GetAuthenticatedOrchardCoreUserAsync();

    _legalEntity = await _session
      .Query<ContentItem, UserPickerFieldIndex>()
      .Where(index => index.ContentPart == "LegalEntityPart")
      .Where(index => index.SelectedUserId == _user.UserId)
      .FirstOrDefaultAsync();
  }
}

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using Mess.Prelude.Extensions.Timestamps;

@inject IContentManager _contentManager;
@inject IServiceProvider _serviceProvider;
@inject NavigationManager NavigationManager;
@inject IOzdsTimeseriesClient _timeseriesClient;

@if(User.RoleNames.Contains("Distribution System Operator Representative")){
@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Korisnici mreže"].Value)
      </MudText>
      <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži korisnike lokacije" Variant="Variant.Text"></MudTextField>
      @foreach(ExpandThing dataStruct in _shownTenants.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Korisnik lokacije"].Value: @dataStruct.data.unit.DisplayText
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => InspectTenant(dataStruct.data.unit)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Potrošnja u tekućem mjesecu"].Value: @(dataStruct.data.totalConsumption is null ? null : DecimalString((decimal)dataStruct.data.totalConsumption/1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Potrošnja u prethodnom mjesecu"].Value: @(dataStruct.data.lastMonthTotalConsumption is null ? null : DecimalString((decimal)dataStruct.data.lastMonthTotalConsumption/1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Iznos zadnjeg računa"].Value: @(dataStruct.data.lastInvoiceTotal is null ? null : DecimalString((decimal)dataStruct.data.lastInvoiceTotal) + " €")
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                  <form method="post" action="@($"admin/IssueInvoice/{dataStruct.data.unit.ContentItemId}")">
                      <button type="submit">@T["Izdati Račun"].Value</button>
                  </form>
              </MudButton>
            </MudItem>

          </MudGrid>
        </MudStack>
      </MudPaper>
      }
  </MudHidden>


@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@T["Korisnici mreže"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <TemplateColumn Title="@T["Korisnici mreže"].Value" Sortable="false">
        <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectTenant(context.Item.unit)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                @context.Item.unit.DisplayText
              </MudButton>
            </MudStack>
        </CellTemplate>
    </TemplateColumn>
    <PropertyColumn
    CellStyle="font-size: x-large;"
    Property="x => x.unit.As<DistributionSystemUnitPart>().Consumption"
    Title='@T["Potrošnja u tekućem mjesecu"].Value'>
          <CellTemplate>
                @(context.Item.totalConsumption is null ? null : DecimalString((decimal)context.Item.totalConsumption/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.lastMonthTotalConsumption"
      Title='@T["Potrošnja u prethodnom mjesecu"].Value'>
          <CellTemplate>
                @if(context.Item.lastMonthTotalConsumption is not null)
                @(DecimalString((decimal)context.Item.lastMonthTotalConsumption/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
    CellStyle="font-size: x-large;"
    Property="x => x.unit.As<DistributionSystemUnitPart>().Consumption"
    Title='@T["Iznos zadnjeg računa"].Value'>
          <CellTemplate>
                @(context.Item.lastInvoiceTotal is null ? null : DecimalString((decimal)context.Item.lastInvoiceTotal) + " €")
          </CellTemplate>
      </PropertyColumn>
    <TemplateColumn CellClass="d-flex justify-end">
          <CellTemplate>
              <MudStack Row>
                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                    <form method="post" action="@($"admin/IssueInvoice/{context.Item.unit.ContentItemId}")">
                        <button type="submit">@T["Izdati Račun"].Value</button>
                    </form>
                </MudButton>
              </MudStack>
          </CellTemplate>
      </TemplateColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>
  </MudHidden>

}
else{

@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Korisnici mreže"].Value)
      </MudText>
      <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži korisnike lokacije" Variant="Variant.Text"></MudTextField>
      @foreach(ExpandThing dataStruct in _shownTenants.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Korisnik lokacije"].Value: @dataStruct.data.unit.DisplayText
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => InspectTenant(dataStruct.data.unit)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Potrošnja u tekućem mjesecu"].Value: @(dataStruct.data.totalConsumption is null ? null : DecimalString((decimal)dataStruct.data.totalConsumption/1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Potrošnja u prethodnom mjesecu"].Value: @(dataStruct.data.lastMonthTotalConsumption is null ? null : DecimalString((decimal)dataStruct.data.lastMonthTotalConsumption/1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Iznos zadnjeg računa"].Value: @(dataStruct.data.lastInvoiceTotal is null ? null : DecimalString((decimal)dataStruct.data.lastInvoiceTotal) + " €")
            </MudItem>

          </MudGrid>
        </MudStack>
      </MudPaper>
      }
  </MudHidden>


@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@T["Korisnici mreže"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <TemplateColumn Title="@T["Korisnici mreže"].Value" Sortable="false">
        <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectTenant(context.Item.unit)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                @context.Item.unit.DisplayText
              </MudButton>
            </MudStack>
        </CellTemplate>
    </TemplateColumn>
    <PropertyColumn
    CellStyle="font-size: x-large;"
    Property="x => x.unit.As<DistributionSystemUnitPart>().Consumption"
    Title='@T["Potrošnja u tekućem mjesecu"].Value'>
          <CellTemplate>
                @(context.Item.totalConsumption is null ? null : DecimalString((decimal)context.Item.totalConsumption/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.lastMonthTotalConsumption"
      Title='@T["Potrošnja u prethodnom mjesecu"].Value'>
          <CellTemplate>
                @if(context.Item.lastMonthTotalConsumption is not null)
                @(DecimalString((decimal)context.Item.lastMonthTotalConsumption/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
    CellStyle="font-size: x-large;"
    Property="x => x.unit.As<DistributionSystemUnitPart>().Consumption"
    Title='@T["Iznos zadnjeg računa"].Value'>
          <CellTemplate>
                @(context.Item.lastInvoiceTotal is null ? null : DecimalString((decimal)context.Item.lastInvoiceTotal) + " €")
          </CellTemplate>
      </PropertyColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>
  </MudHidden>
}

@code {
    [Parameter]
    public User User { get; set; } = default!;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth;
    private string? _searchString;
    private ContentItem? _legalEntity;
    private IEnumerable<ContentItem>? _units;
    private decimal? _totalConsumption = 0;
    private decimal? _lastMonthTotalConsumption = 0;
    private decimal? _lastInvoiceTotal = 0;
    public record struct TabularData(ContentItem unit, decimal? totalConsumption, decimal? lastMonthTotalConsumption, decimal? lastInvoiceTotal);
    private List<TabularData> _dataStruct = new List<TabularData>();
    private IEnumerable<ContentItem>? _systems;
    private IReadOnlyList<AbbAggregate>? _abbRange;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRange;
    private IReadOnlyList<AbbAggregate>? _abbRangeLastMonth;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRangeLastMonth;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
    private DateTimeOffset now = DateTimeOffset.UtcNow;
    protected override async Task OnInitializedAsync()
    {
        await WithTransientSessionAsync(async session => {
            _legalEntity = await session
                .Query<ContentItem, UserPickerFieldIndex>()
                .Where(index => index.ContentPart == "LegalEntityPart")
                .Where(index => index.SelectedUserId == User.UserId)
                .FirstOrDefaultAsync();

            if (User.RoleNames.Contains("Distribution System Operator Representative")) {
                _systems = await session
                  .Query<ContentItem, ClosedDistributionSystemIndex>()
                  .Where(index => index.DistributionSystemOperatorContentItemId == _legalEntity.ContentItemId)
                  .ListAsync();
                _units = await session
                  .Query<ContentItem, DistributionSystemUnitIndex>()
                  .Where(index => index.DistributionSystemOperatorContentItemId == _legalEntity.ContentItemId)
                  .ListAsync();
            }
            else if (User.RoleNames.Contains("Closed Distribution System Representative")){
                _systems = await session
                  .Query<ContentItem, ClosedDistributionSystemIndex>()
                  .Where(index => index.ClosedDistributionSystemContentItemId == _legalEntity.ContentItemId)
                  .ListAsync();
                _units = await session
                  .Query<ContentItem, DistributionSystemUnitIndex>()
                  .Where(index => index.ClosedDistributionSystemContentItemId == _legalEntity.ContentItemId)
                  .ListAsync();
            }

            foreach(var unit in _units){
                var ioTDevices = await session
                  .Query<ContentItem, OzdsIotDeviceIndex>()
                  .Where(index => index.DistributionSystemUnitContentItemId == unit.ContentItemId)
                  .Where(index => !index.IsMessenger)
                  .ListAsync();

                var invoices = await session
                  .Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
                  .Where(index => index.RecipientContentItemId == unit.ContentItemId)
                  .ListAsync();
            if(ioTDevices is not null){
              _abbRange = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth,now);
              _abbRangeLastMonth = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
              _schneiderRange = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth,now);
              _schneiderRangeLastMonth = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
              foreach(var omm in ioTDevices){
                _startEnd = new();
                _startEndLastMonth = new();
                if(omm.DisplayText.StartsWith("abb")){
                  if(_abbRange is not null &&_abbRange.Count() > 0){
                    var device = _abbRange.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (device is null){
                      continue;
                    }
                    _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
                  }
                  if(_abbRangeLastMonth is not null &&_abbRangeLastMonth.Count() > 0){
                    var deviceLastMonth = _abbRangeLastMonth.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (deviceLastMonth is null){
                      continue;
                    }
                    _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
                  }
                }
                else{
                  if(_schneiderRange is not null &&_schneiderRange.Count() > 0){
                    var device = _schneiderRange.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (device is null){
                      continue;
                    }
                    _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
                  }
                  if(_schneiderRangeLastMonth is not null &&_schneiderRangeLastMonth.Count() > 0){
                    var deviceLastMonth = _schneiderRangeLastMonth.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (deviceLastMonth is null){
                      continue;
                    }
                    _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
                  }
                }
                _totalConsumption += _startEnd.First - _startEnd.Last;
                if(_startEndLastMonth.First is not null && _startEndLastMonth.Last is not null)
                  _lastMonthTotalConsumption += _startEndLastMonth.First - _startEndLastMonth.Last;
              }
            }
            if(invoices.Count() > 0)
              _lastInvoiceTotal = invoices.OrderBy(x => x.As<InvoicePart>().Date.Value).LastOrDefault().As<OzdsInvoicePart>().Data.TotalWithTax;
            _dataStruct.Add(new TabularData(unit, _totalConsumption, _lastMonthTotalConsumption, _lastInvoiceTotal));
            foreach(var data in _dataStruct){
              _shownTenants.Add( new ExpandThing{data = data, show = true, expand = false});
            }
            _totalConsumption = 0;
          }
        });
    }
    private Func<TabularData, bool> _quickFilter => x =>
  {
     if (string.IsNullOrWhiteSpace(_searchString))
         return true;

     if (x.unit.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
         return true;

     return false;
  };
  private void InspectTenant(ContentItem item) {
      NavigationManager.NavigateTo($"app/tenant/{item.ContentItemId}");
  }
  private void InspectSubnet(ContentItem item) {
      NavigationManager.NavigateTo($"app/subnet/{item.ContentItemId}");
  }

@* MOBILE *@
  public string TextValue { get; set; } = "";
  private class ExpandThing {
    public TabularData data;
    public bool expand;
    public bool show;
  }
  List<ExpandThing> _shownTenants = new();
  private void OnExpandCollapseClick(string id) {
    var a = _shownTenants.Where(x => x.data.unit.ContentItemId == id).FirstOrDefault();
    a.expand = !a.expand;
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownTenants)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownTenants.Where(x => x.data.unit.DisplayText.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}

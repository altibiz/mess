@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;
@using Mess.Prelude.Extensions.Timestamps;

@inject IOzdsTimeseriesClient _timeseriesClient

@* MOBILE *@
   <MudHidden Breakpoint="Breakpoint.MdAndUp">

    <MudGrid Class="my-3 pa-1">
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @(T["Potrošnja u godini(kWh):"].Value)
              </MudText>
            </MudItem>
            @* <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small"> *@
              <TenantGraph LegalEntity="@LegalEntity"></TenantGraph>
            @* </MudContainer> *@
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja prošli mjesc(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                @if(_lastMonthTotal is not null)
                  @(DecimalString((decimal)_lastMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja ovaj mjesec(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                @if(_thisMonthTotal is not null)
                  @(DecimalString((decimal)_thisMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudGrid Class="my-3">
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja u godini(kWh):"].Value)
              </MudText>
            </MudItem>
            @* <MudContainer Class="d-flex align-center justify-center" MaxWidth="MaxWidth.Small" Style="height: 100%;"> *@
              <TenantGraph LegalEntity="@LegalEntity"></TenantGraph>
            @* </MudContainer> *@
          </MudPaper>
        </MudItem>
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja prošlog mjeseca(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" MaxWidth="MaxWidth.Small" Style="height: 100%;">
              <MudText Typo="Typo.h1">
                @if(_lastMonthTotal is not null)
                  @(DecimalString((decimal)_lastMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja ovaj mjesec(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" MaxWidth="MaxWidth.Small" Style="height: 75%;">
              <MudText Typo="Typo.h1">
                @if(_thisMonthTotal is not null)
                  @(DecimalString((decimal)_thisMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>
  </MudHidden>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private IEnumerable<ContentItem>? _ioTDevices;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth = new(0, 0, DateTime.UtcNow);
    private decimal? _lastMonthTotal = 0;
    private decimal? _thisMonthTotal = 0;
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
          _ioTDevices = await session
            .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => index.DistributionSystemUnitContentItemId == LegalEntity.ContentItemId)
            .Where(index => !index.IsMessenger)
            .ListAsync();


        if(_ioTDevices is not null){
          var now = DateTimeOffset.UtcNow;
          var (startThisMonth, startNextMonth) = now.GetMonthRange();
          var startLastMonth = startThisMonth.AddMonths(-2);
          var deviceIds = _ioTDevices.Select(device => (string)device.Content.IotDevicePart.DeviceId.Text).ToList();
          var resultAbb = await _timeseriesClient.GetBulkAbbMonthlyEnergyRangeAsync(new List<string>{"abb"}, startLastMonth , startNextMonth);
          var resultSchneider = await _timeseriesClient.GetBulkSchneiderMonthlyEnergyRangeAsync(deviceIds, startLastMonth , startNextMonth);

          _thisMonthTotal = resultAbb
            .Where(resultAbb => resultAbb.Timestamp == startThisMonth)
            .Aggregate(0M, (last, resultAbb) => last + resultAbb.ActiveEnergyImport_Wh)
            + resultSchneider
              .Where(resultSchneider => resultSchneider.Timestamp == startThisMonth)
              .Aggregate(0M, (last, resultAbb) => last + resultAbb.ActiveEnergyImport_Wh);

          _lastMonthTotal = resultAbb
            .Where(resultAbb => resultAbb.Timestamp == startLastMonth)
            .Aggregate(0M, (last, resultAbb) => last + resultAbb.ActiveEnergyImport_Wh)
            + resultSchneider
              .Where(resultSchneider => resultSchneider.Timestamp == startLastMonth)
              .Aggregate(0M, (last, resultAbb) => last + resultAbb.ActiveEnergyImport_Wh);
        }
      });
    }
  }

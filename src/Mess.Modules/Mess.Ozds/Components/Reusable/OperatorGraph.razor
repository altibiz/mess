@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;

@inject IOzdsTimeseriesClient _timeseriesClient

@if(_leftGraphValues is not null){
@* MOBILE *@
   <MudHidden Breakpoint="Breakpoint.MdAndUp">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              @(_leftDataTitle + T[" za"].Value + ": " + _leftTitle)
            </MudItem>
            <MudContainer Class="d-flex flex-column" MaxWidth="MaxWidth.Small">
              @if(_leftGraphValues is not null ){
                <ApexChart TItem="ChartDataL"
                  XAxisType="XAxisType.Datetime"
                  Options="graphLOptionsMob"
                  @ref="leftChart">
                    @for(int i = 0; i < leftLineCount ; i++){
                      var j = i;
                      <ApexPointSeries TItem="ChartDataL"
                      Items="@_leftGraphValues"
                      Name="@_leftGraphValues.Select(x => x.names[j]).FirstOrDefault()"
                      SeriesType="SeriesType.Line"
                      XValue='x => x.date'
                      YValue="x => x.values[j]"
                    />
                    }
                    @if(leftLineCount == 0){
                      <ApexPointSeries TItem="ChartDataL"
                      Items="@_leftGraphValues"
                      Name="n/a"
                      SeriesType="SeriesType.Line"
                      XValue='x => x.date'
                      YValue="x => 0"
                    />
                    }
                </ApexChart>
                <MudItem Class="d-flex flex-row justify-center gap-2">
                  <MudMenu Label="@_leftTitle" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                    @if(_ioTDevices is not null){
                      @foreach(var omm in _ioTDevices){
                        <MudMenuItem OnClick="@(() => LeftMenuItemClicked(omm.DisplayText))">@omm.DisplayText</MudMenuItem>
                      }
                    }
                  </MudMenu>
                  <MudMenu Label="@_leftDataTitle" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                      @foreach(var type in _displayType){
                        <MudMenuItem OnClick="@(() => LeftMenuDataItemClicked(type))">@type</MudMenuItem>
                      }
                  </MudMenu>
                  <MudMenu Label="@_leftTimeTitle" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale1"))">5 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale2"))">10 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale3"))">15 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale4"))">30 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale5"))">1 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale6"))">3 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale7"))">6 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale8"))">12 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale9"))">24 h</MudMenuItem>
                  </MudMenu>
                </MudItem>
              }
            </MudContainer>
          </MudPaper>
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
          <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8 flex-column" Height="500px">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              @(_leftDataTitle + " za: " + _leftTitle)
            </MudItem>
            <MudContainer Class="d-flex flex-column" MaxWidth="MaxWidth.Medium">
              @if(_leftGraphValues is not null ){
                <ApexChart TItem="ChartDataL"
                  XAxisType="XAxisType.Datetime"
                  Options="graphLOptions"
                  @ref="leftChart">
                    @for(int i = 0; i < leftLineCount ; i++){
                      var j = i;
                      <ApexPointSeries TItem="ChartDataL"
                      Items="@_leftGraphValues"
                      Name="@_leftGraphValues.Select(x => x.names[j]).FirstOrDefault()"
                      SeriesType="SeriesType.Line"
                      XValue='x => x.date'
                      YValue="x => x.values[j]"
                    />
                    }
                    @if(leftLineCount == 0){
                      <ApexPointSeries TItem="ChartDataL"
                      Items="@_leftGraphValues"
                      Name="n/a"
                      SeriesType="SeriesType.Line"
                      XValue='x => x.date'
                      YValue="x => 0"
                    />
                    }
                </ApexChart>
                <MudItem Class="d-flex flex-row justify-center gap-2">
                  <MudMenu Label="@_leftTitle" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                    @if(_ioTDevices is not null){
                      @foreach(var omm in _ioTDevices){
                        <MudMenuItem OnClick="@(() => LeftMenuItemClicked(omm.DisplayText))">@omm.DisplayText</MudMenuItem>
                      }
                    }
                  </MudMenu>
                  <MudMenu Label="@_leftDataTitle" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                      @foreach(var type in _displayType){
                        <MudMenuItem OnClick="@(() => LeftMenuDataItemClicked(type))">@type</MudMenuItem>
                      }
                  </MudMenu>
                  <MudMenu Label="@_leftTimeTitle" Dense="true" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale1"))">5 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale2"))">10 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale3"))">15 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale4"))">30 min</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale5"))">1 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale6"))">3 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale7"))">6 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale8"))">12 h</MudMenuItem>
                    <MudMenuItem OnClick="@(() => MenuItemClicked("Scale9"))">24 h</MudMenuItem>
                  </MudMenu>
                </MudItem>
              }
            </MudContainer>
          </MudPaper>
  </MudHidden>
}


@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private ApexChartOptions<ChartDataL> graphLOptions = new();
    private ApexChartOptions<ChartDataL> graphLOptionsMob = new();
    private List<string> _displayType = new List<string>{
      "Napon", "Struja", "Snaga", "Jalova Snaga", "Prividna snaga"
    };
    public int timeSpanMins = 1;
    public int leftLineCount = 0;
    public int rightLineCount = 0;
    public IEnumerable<ChartDataL>? _leftGraphValues;
    public IEnumerable<ChartDataL>? _rowData;
    private string _leftTitle = "";
    private string _leftDataTitle = "";
    private string _leftTimeTitle = "1 min";
    public record ChartDataL(decimal?[] values, string[] names, DateTimeOffset date, string source);
    private ApexChart<ChartDataL> leftChart = default!;
    private IEnumerable<ContentItem>? _ioTDevices;
    protected override async Task OnInitializedAsync()
    {
      graphLOptionsMob= new ApexChartOptions<ChartDataL>() {
        Grid = new Grid
        {
            BorderColor = "#e7e7e7",
            Row = new GridRow
            {
                Colors = new List<string> { "#f3f3f3", "transparent" },
                Opacity = 0.5d
            }
        }
        };
      graphLOptions= new ApexChartOptions<ChartDataL>() {
        Grid = new Grid
        {
            BorderColor = "#e7e7e7",
            Row = new GridRow
            {
                Colors = new List<string> { "#f3f3f3", "transparent" },
                Opacity = 0.5d
            }
        }
        };
      graphLOptions.Yaxis = new();
      graphLOptions.Yaxis.Add(new YAxis()
            {
              Labels = new YAxisLabels(){
                Formatter = "function(val, index) { return val.toFixed(0); }"
                }
            });
      graphLOptions.Chart = new Chart
      {
        Toolbar = new ApexCharts.Toolbar
        {
            Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
        }
      };
      graphLOptions.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"hh : mm : ss" } };
      graphLOptionsMob.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"hh : mm : ss" } };
      graphLOptionsMob.Yaxis = new List<YAxis>();
      graphLOptionsMob.Xaxis = new XAxis();

      graphLOptionsMob.Yaxis.Add(new YAxis
            {
                Show = false,
                Labels = new YAxisLabels(){
                  Formatter = "function(val, index) { return val.toFixed(0); }"
                }
            });
      graphLOptionsMob.Xaxis = new XAxis()
            {
              Labels = new XAxisLabels(){ Show = false }
            };
      graphLOptionsMob.Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false}
                }
            };
      await WithTransientSessionAsync(async session => {
        _ioTDevices = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
          .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
          .Where(index => !index.IsMessenger)
          .ListAsync();
        if(_ioTDevices is not null && _ioTDevices.Count() > 1){
          var c = _ioTDevices.Select(x => x).Take(2);
          foreach(var omm in c){
            if(omm.DisplayText.StartsWith("abb")){
              var a = await _timeseriesClient.GetAbbMeasurementsAsync(omm.DisplayText, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
              if(_leftGraphValues is null){
                _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W}, names: new string[]{"L1 Potrošnja", "L2 Potrošnja","L3 Potrošnja"}, date:x.Timestamp, source:x.Source)).ToList();
                leftLineCount = 3;
                }
            }
            else if(omm.DisplayText.StartsWith("schneider")){
              var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(omm.DisplayText, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
              if(_leftGraphValues is null){
                _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W}, names: new string[]{"L1 Potrošnja", "L2 Potrošnja","L3 Potrošnja"}, date:x.Timestamp, source:x.Source)).ToList();
                leftLineCount = 3;
              }
            }
          }
        }
        if(_ioTDevices is not null && _ioTDevices.Count() > 0){
          _leftTitle = _ioTDevices.First().DisplayText;
        }
        else{
          _leftTitle = "none";
        }
        if(_displayType is not null && _displayType.Count() > 0){
          _leftDataTitle = "snaga";
        }
        else{
          _leftDataTitle = "none";
        }
      });
    }

  private async Task LeftMenuItemClicked(string source)
  {
    if(source.StartsWith("abb")){
      var a = await _timeseriesClient.GetAbbMeasurementsAsync(source, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
      _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W}, names: new string[]{"L1 Potrošnja", "L2 Potrošnja","L3 Potrošnja"}, date:x.Timestamp, source:x.Source)).ToList();
      _displayType = new List<string>{"Napon", "Struja", "Snaga", "Jalova Snaga"};
      if(_leftDataTitle == "Prividna snaga")
        _leftDataTitle = "Jalova Snaga";
    }
    else if(source.StartsWith("schneider")){
      var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(source, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
      _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W}, names: new string[]{"L1 Potrošnja", "L2 Potrošnja","L3 Potrošnja"}, date:x.Timestamp, source:x.Source)).ToList();
      _displayType = new List<string>{"Napon", "Struja", "Snaga", "Jalova Snaga", "Prividna snaga"};
    }
    _leftTitle = source;
    StateHasChanged();
    await leftChart.UpdateSeriesAsync(true);
    await LeftMenuDataItemClicked(_leftDataTitle);
  }

  private async Task GetValues(string source, string type){
    IReadOnlyList<AbbMeasurement>? abbMeasurements = null;
    IReadOnlyList<SchneiderMeasurement>? schneiderMeasurements = null;
    IReadOnlyList<AbbAggregate>? abbAggregate = null;
    IReadOnlyList<SchneiderAggregate>? schneiderAggregate = null;
    if(source.StartsWith("abb")){
      if(timeSpanMins <= 60){
        abbMeasurements = await _timeseriesClient.GetAbbMeasurementsAsync(source, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
      }
      else{
        abbAggregate = await _timeseriesClient.GetAbbQuarterHourlyAggregateAsync(source, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
      }
      _displayType = new List<string>{"Napon", "Struja", "Snaga", "Jalova Snaga"};
      if(_leftDataTitle == "Prividna snaga")
        _leftDataTitle = "Jalova Snaga";
    }
    else if(source.StartsWith("schneider")){
      if(timeSpanMins <= 60){
        schneiderMeasurements = await _timeseriesClient.GetSchneiderMeasurementsAsync(source, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
      }
      else{
        schneiderAggregate = await _timeseriesClient.GetSchneiderQuarterHourlyAggregateAsync(source, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
      }
      _displayType = new List<string>{"Napon", "Struja", "Snaga", "Jalova Snaga", "Prividna snaga"};
    }
    _leftTitle = source;

    switch(type)
    {
      case "Struja":
        if(abbMeasurements is not null){
          _leftGraphValues = abbMeasurements.Select(x => new ChartDataL(values: new decimal?[]{x.CurrentL1_A, x.CurrentL2_A, x.CurrentL3_A}, names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        else if(schneiderMeasurements is not null){
          _leftGraphValues = schneiderMeasurements.Select(x => new ChartDataL(values: new decimal?[]{x.CurrentL1_A, x.CurrentL2_A, x.CurrentL3_A}, names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        else if(abbAggregate is not null){
          @* _leftGraphValues = abbAggregate.Select(x => new ChartDataL(values: new decimal?[]{x.CurrentL1_A, x.CurrentL2_A, x.CurrentL3_A}, names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"}, date:x.Timestamp, source:x.Source)).ToList(); *@
          leftLineCount = 3;
        }
        else if(schneiderAggregate is not null){
          @* _leftGraphValues = schneiderAggregate.Select(x => new ChartDataL(values: new decimal?[]{x.CurrentL1_A, x.CurrentL2_A, x.CurrentL3_A}, names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"}, date:x.Timestamp, source:x.Source)).ToList(); *@
          leftLineCount = 3;
        }
        _leftDataTitle = "Struja";
        break;
    }

  }
  private async Task LeftMenuDataItemClicked(string type)
  {
    switch(type)
    {
      case "Struja":
        if(_leftTitle.StartsWith("abb")){
          var a = await _timeseriesClient.GetAbbMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.CurrentL1_A, x.CurrentL2_A, x.CurrentL3_A}, names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        else if(_leftTitle.StartsWith("schneider")){
          var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.CurrentL1_A, x.CurrentL2_A, x.CurrentL3_A}, names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        _leftDataTitle = "Struja";
        break;
      case "Snaga":
        if(_leftTitle.StartsWith("abb")){
          var a = await _timeseriesClient.GetAbbMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W}, names: new string[]{"L1 Potrošnja", "L2 Potrošnja","L3 Potrošnja"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        else if(_leftTitle.StartsWith("schneider")){
          var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W}, names: new string[]{"L1 Potrošnja", "L2 Potrošnja","L3 Potrošnja"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        _leftDataTitle = "Snaga";
        break;
      case "Napon":
        if(_leftTitle.StartsWith("abb")){
          var a = await _timeseriesClient.GetAbbMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.VoltageL1_V, x.VoltageL2_V, x.VoltageL3_V}, names: new string[]{"L1 Napon", "L2 Napon","L3 Napon"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        else if(_leftTitle.StartsWith("schneider")){
          var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.VoltageL1_V, x.VoltageL2_V, x.VoltageL3_V}, names: new string[]{"L1 Napon", "L2 Napon","L3 Napon"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        _leftDataTitle = "Napon";
        break;
      case "Jalova Snaga":
        if(_leftTitle.StartsWith("abb")){
          var a = await _timeseriesClient.GetAbbMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ReactivePowerL1_VAR, x.ReactivePowerL2_VAR, x.ReactivePowerL3_VAR}, names: new string[]{"L1 Jalova snaga", "L2 Jalova snaga","L3 Jalova snaga"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 3;
        }
        else if(_leftTitle.StartsWith("schneider")){
          var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ReactivePowerTotal_VAR}, names: new string[]{"Reaktivna snaga"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 1;
        }
        _leftDataTitle = "Jalova Snaga";
        break;
      case "Prividna snaga":
        if(_leftTitle.StartsWith("abb")){
          var a = await _timeseriesClient.GetAbbMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{}, names: new string[]{}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 0;
        }
        else if(_leftTitle.StartsWith("schneider")){
          var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(_leftTitle, DateTimeOffset.UtcNow.AddMinutes(- timeSpanMins), DateTimeOffset.UtcNow);
          _leftGraphValues = a.Select(x => new ChartDataL(values: new decimal?[]{x.ApparentPowerTotal_VA}, names: new string[]{"Prividna snaga"}, date:x.Timestamp, source:x.Source)).ToList();
          leftLineCount = 1;
        }
        _leftDataTitle = "Prividna snaga";
        break;
      default:
        break;
    }
    StateHasChanged();
    await leftChart.UpdateSeriesAsync(true);
    @* await GetValues(_leftTitle, _leftDataTitle); *@
  }
  private async Task MenuItemClicked(string item)
  {
      switch(item)
      {
        case "Scale1":
            timeSpanMins = 5;
            _leftTimeTitle = "5 min";
            break;
        case "Scale2":
            timeSpanMins = 10;
            _leftTimeTitle = "10 min";
            break;
        case "Scale3":
            timeSpanMins = 15;
            _leftTimeTitle = "15 min";
            break;
        case "Scale4":
            timeSpanMins = 30;
            _leftTimeTitle = "30 min";
            break;
        case "Scale5":
            timeSpanMins = 60;
            _leftTimeTitle = "1 h";
            break;
        case "Scale6":
            timeSpanMins = 60 * 3;
            _leftTimeTitle = "3 h";
            break;
        case "Scale7":
            timeSpanMins = 60 * 6;
            _leftTimeTitle = "6 h";
            break;
        case "Scale8":
            timeSpanMins = 60 * 12;
            _leftTimeTitle = "12 h";
            break;
        case "Scale9":
            timeSpanMins = 60 * 24;
            _leftTimeTitle = "24 h";
            break;
      }
    await LeftMenuItemClicked(_leftTitle);
    @* await GetValues(_leftTitle, _leftDataTitle); *@
  }
}

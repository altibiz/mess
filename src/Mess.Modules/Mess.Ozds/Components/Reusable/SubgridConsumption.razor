@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using Mess.Prelude.Extensions.Timestamps;

@inject NavigationManager NavigationManager;
@inject IOzdsTimeseriesClient _timeseriesClient;

@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudItem Class="mb-5">
      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Potrošnja lokacija"].Value)
      </MudText>
      @foreach(ExpandThing dataStruct in _shownSubnets.Where(x => x.show == true).ToList()){
        <MudPaper Elevation="2" Class="ma-1">
          <MudStack Spacing="0">
            <MudGrid Class="d-flex pa-2">
              <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
                @T["Lokacija"].Value: @dataStruct.data.system.DisplayText
              </MudItem>
              <MudItem xs="2" Class="d-flex align-center justify-end">
                <MudIconButton OnClick="() => InspectSubnet(dataStruct.data.system)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
              </MudItem>
              <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                @T["Potrošnja u tekućem mjesecu"].Value: @(dataStruct.data.consumption is null ? null : DecimalString((decimal)dataStruct.data.consumption/1000, 0) + " kWh")
              </MudItem>
              <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                @T["Potrošnja u prethodnom mjesecu"].Value: @(dataStruct.data.lastMonthConsumption is null ? null : DecimalString((decimal)dataStruct.data.lastMonthConsumption/1000, 0) + " kWh")
              </MudItem>
              <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                @T["Zbroj računa tokom prethodnog mjeseca"].Value: @(DecimalString((decimal)dataStruct.data.invoiceTotal, 2) + " EUR")
              </MudItem>
            </MudGrid>
          </MudStack>
        </MudPaper>
      }
    </MudItem>
  </MudHidden>

@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
    T="TabularData"
    MultiSelection="true"
    Items="@_dataStruct"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@_quickFilter"
    Class="mb-6">
    <ToolBarContent>
      <MudText Typo="Typo.h4">@T["Potrošnja lokacija"]</MudText>
      <MudSpacer />
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@T["Ukupna pretraži tekućeg mjeseca"].Value"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="MudBlazor.Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>
      <TemplateColumn Title="@T["Lokacije"].Value" Sortable="false">
          <CellTemplate>
              <MudStack Row>
                <MudButton OnClick="() => InspectSubnet(context.Item.system)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                  @context.Item.system.DisplayText
                </MudButton>
              </MudStack>
          </CellTemplate>
      </TemplateColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Potrošnja u tekućem mjesecu"].Value'>
            <CellTemplate>
                @(DecimalString((decimal)context.Item.consumption/1000, 0) + " kWh")
            </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.lastMonthConsumption"
        Title='@T["Potrošnja u prethodnom mjesecu"].Value'>
            <CellTemplate>
                  @if(context.Item.lastMonthConsumption is not null)
                  @(DecimalString((decimal)context.Item.lastMonthConsumption/1000, 0) + " kWh")
            </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.invoiceTotal"
        Title='@T["Zbroj računa tokom prethodnog mjeseca"].Value'>
              <CellTemplate>
                    @(DecimalString((decimal)context.Item.invoiceTotal) + " EUR")
              </CellTemplate>
      </PropertyColumn>
    </Columns>
    <PagerContent>
      <MudDataGridPager T="TabularData" />
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private IEnumerable<ContentItem>? _ioTDevices;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth;
    private string? _searchString;
    private IEnumerable<ContentItem>? _systems;
    private IEnumerable<ContentItem>? _units;
    private IEnumerable<ContentItem>? _invoices;
    private decimal? _consumption = 0;
    private decimal? _lastMonthConsumption = 0;
    public record struct TabularData(ContentItem system, decimal? consumption, decimal? lastMonthConsumption, decimal invoiceTotal);
    private List<TabularData> _dataStruct = new List<TabularData>();
    private IReadOnlyList<AbbAggregate>? _abbRange;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRange;
    private IReadOnlyList<AbbAggregate>? _abbRangeLastMonth;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRangeLastMonth;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
    private DateTimeOffset now = DateTimeOffset.UtcNow;
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
        _systems = await session
          .Query<ContentItem, ClosedDistributionSystemIndex>()
          .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
          .LatestPublished()
          .ListAsync();
        _units = await session
          .Query<ContentItem, DistributionSystemUnitIndex>()
          .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
          .LatestPublished()
          .ListAsync();
        _ioTDevices = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
          .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
          .Where(index => !index.IsMessenger)
          .LatestPublished()
          .ListAsync();
        _invoices = await session
          .Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
          .Where(index => index.IssuerContentItemId == LegalEntity.ContentItemId)
          .LatestPublished()
          .ListAsync();
      });
      if(_ioTDevices is not null){
              _abbRange = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth,now);
              _abbRangeLastMonth = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
              _schneiderRange = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth,now);
              _schneiderRangeLastMonth = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
              foreach(var omm in _ioTDevices){
                _startEnd = new();
                _startEndLastMonth = new();
                if(omm.DisplayText.StartsWith("abb")){
                  if(_abbRange is not null &&_abbRange.Count() > 0){
                    var device = _abbRange.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (device is null){
                      continue;
                    }
                    _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
                  }
                  if(_abbRangeLastMonth is not null &&_abbRangeLastMonth.Count() > 0){
                    var deviceLastMonth = _abbRangeLastMonth.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (deviceLastMonth is null){
                      continue;
                    }
                    _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
                  }
                }
                else{
                  if(_schneiderRange is not null &&_schneiderRange.Count() > 0){
                    var device = _schneiderRange.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (device is null){
                      continue;
                    }
                    _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
                  }
                  if(_schneiderRangeLastMonth is not null &&_schneiderRangeLastMonth.Count() > 0){
                    var deviceLastMonth = _schneiderRangeLastMonth.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                    if (deviceLastMonth is null){
                      continue;
                    }
                    _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
                  }
                }
                if(_startEnd.First is not null && _startEnd.Last is not null)
                  _consumption += _startEnd.First - _startEnd.Last;
                if(_startEndLastMonth.First is not null && _startEndLastMonth.Last is not null)
                  _lastMonthConsumption += _startEndLastMonth.First - _startEndLastMonth.Last;
              }
            }

      if(_systems is not null && _invoices is not null){
        var lastMonthInvoices = _invoices.Where(x => x.As<InvoicePart>().Date.Value > nowMonth.AddMonths(-1)).Where(x => x.As<InvoicePart>().Date.Value <= nowMonth).ToList();
        foreach(var sys in _systems){
          var _invoiceTotal = lastMonthInvoices.Where(x => x.As<OzdsInvoicePart>().Data.ClosedDistributionSystem.ContentItemId == sys.ContentItemId).Sum(x => x.As<OzdsInvoicePart>().Data.TotalWithTax);
          _dataStruct.Add( new TabularData{system = sys, consumption = _consumption, lastMonthConsumption = _lastMonthConsumption, invoiceTotal = _invoiceTotal});
          foreach(var data in _dataStruct){
            _shownSubnets.Add( new ExpandThing{data = data, show = true, expand = false});
          }
        }
      }
  }

  private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.system.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private string GetEmail(ContentItem user) {
    return user.As<LegalEntityPart>().Email.Text;
  }
  private void InspectSubnet(ContentItem item) {
      NavigationManager.NavigateTo($"app/subnet/{item.ContentItemId}");
  }


  @* MOBILE *@
  public string TextValue { get; set; } = "";
  private class ExpandThing {
    public TabularData data = default!;
    public bool expand;
    public bool show;
  }
  List<ExpandThing> _shownSubnets = new();
  private void OnExpandCollapseClick(string id) {
    var a = _shownSubnets.Where(x => x.data.system.ContentItemId == id).FirstOrDefault();
    a.expand = !a.expand;
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownSubnets)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownSubnets.Where(x => x.data.system.DisplayText.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}

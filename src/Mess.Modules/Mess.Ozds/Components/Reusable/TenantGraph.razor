@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;
@using Mess.Prelude.Extensions.Timestamps;

@inject IOzdsTimeseriesClient _timeseriesClient

@if(_leftGraphValues is not null){
@* MOBILE *@
   <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudContainer Class="d-flex flex-column" MaxWidth="MaxWidth.Small">
              @if(_leftGraphValues is not null ){
                <ApexChart TItem="ChartDataL"
                  XAxisType="XAxisType.Datetime"
                  Options="graphLOptionsMob"
                  @ref="leftChart">
                      <ApexPointSeries TItem="ChartDataL"
                      Items="@_leftGraphValues"
                      Name="Potrošnja"
                      SeriesType="SeriesType.Area"
                      XValue='x => x.date'
                      YValue="x => x.value"
                    />
                </ApexChart>
              }
            </MudContainer>
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    @if(_leftGraphValues is not null ){
      <ApexChart TItem="ChartDataL"
        XAxisType="XAxisType.Datetime"
        Options="graphLOptions"
        @ref="leftChart">
            <ApexPointSeries TItem="ChartDataL"
            Items="@_leftGraphValues"
            Name="Potrošnja"
            SeriesType="SeriesType.Area"
            XValue='x => x.date'
            YValue="x => x.value"
          />
      </ApexChart>
    }
  </MudHidden>
}


@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private ApexChartOptions<ChartDataL> graphLOptions = new();
    private ApexChartOptions<ChartDataL> graphLOptionsMob = new();
    public IEnumerable<ChartDataL>? _leftGraphValues;
    public List<ChartDataL> _totalConsumption = new();
    public record ChartDataL(decimal value, string name, DateTimeOffset date, string source);
    private ApexChart<ChartDataL> leftChart = default!;
    private DateTimeOffset nowYear = DateTimeOffset.UtcNow.GetStartOfYear();
    private DateTimeOffset now = DateTime.UtcNow;
    protected override async Task OnInitializedAsync()
    {
      graphLOptionsMob= new ApexChartOptions<ChartDataL>() {
        Grid = new Grid
        {
            BorderColor = "#e7e7e7",
            Row = new GridRow
            {
                Colors = new List<string> { "#f3f3f3", "transparent" },
                Opacity = 0.5d
            }
        }
        };
      graphLOptions= new ApexChartOptions<ChartDataL>() {
        Grid = new Grid
        {
            BorderColor = "#e7e7e7",
            Row = new GridRow
            {
                Colors = new List<string> { "#f3f3f3", "transparent" },
                Opacity = 0.5d
            }
        }
        };
      graphLOptions.Chart = new Chart
      {
        Toolbar = new ApexCharts.Toolbar
        {
            Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
        }
      };
      graphLOptions.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"dd. MM. yyyy." } };
      graphLOptionsMob.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"dd. MM. yyyy." } };
      graphLOptionsMob.Yaxis = new List<YAxis>();
      graphLOptions.Yaxis = new List<YAxis>();
      graphLOptionsMob.Xaxis = new XAxis();

      graphLOptionsMob.Yaxis.Add(new YAxis
            {
                Show = false
            });
      graphLOptions.Yaxis.Add(new YAxis()
            {
              Labels = new YAxisLabels(){
                Formatter = "function(val, index) { return val.toFixed(0);}"
                }
            });
      graphLOptionsMob.Xaxis = new XAxis()
            {
                Labels = new XAxisLabels(){
                  Format = @"dd. MM."
                 }
            };
      graphLOptionsMob.Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false}
                }
            };
      graphLOptions.Xaxis = new XAxis()
            {
                Labels = new XAxisLabels(){
                  Format = @"dd. MM."
                 }
            };
      graphLOptions.Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false}
                }
            };
      await WithTransientSessionAsync(async session => {
        var _ioTDevices = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => !index.IsMessenger)
          .Where(x => x.DistributionSystemUnitContentItemId == LegalEntity.ContentItemId)
          .ListAsync();
        foreach(var omm in _ioTDevices){
          if(omm.DisplayText.StartsWith("abb")){
            var measurements = await _timeseriesClient.GetAbbMonthlyAggregateAsync(omm.DisplayText, nowYear, now);
            var chartDataList = measurements.Select(x => new ChartDataL(value: x.ActiveEnergyImportTotalMax_Wh/1000, name: "Potrošnja", date: x.Timestamp, source: x.Source)).ToList();
            _totalConsumption.AddRange(chartDataList);
          }
          else{
            var measurements = await _timeseriesClient.GetSchneiderMonthlyAggregateAsync(omm.DisplayText, nowYear, now);
            var chartDataList = measurements.Select(x => new ChartDataL(value: x.ActiveEnergyImportTotalMax_Wh/1000, name: "Potrošnja", date: x.Timestamp, source: x.Source)).ToList();
            _totalConsumption.AddRange(chartDataList);
          }
        }
        var aggregatedConsumption = _totalConsumption
            .GroupBy(x => x.date)
            .Select(group =>
            {
                // Since values is now a decimal, we aggregate by summing directly
                var aggregatedValue = group.Sum(g => g.value);

                var firstItem = group.First();

                // Since names is now a string, we simply take the name from the first item
                // Assuming 'name' is still relevant to be passed in this manner
                return new ChartDataL(
                    aggregatedValue,
                    firstItem.name,
                    group.Key,
                    firstItem.source);
            })
            .ToList();

        // Step 3: Replace _totalConsumption with aggregated results
        _totalConsumption.Clear(); // Clear existing items
        _totalConsumption.AddRange(aggregatedConsumption); // Add aggregated items
        var minValue = _totalConsumption.MinBy(consumption => consumption.value);
        if (minValue is not null)
          _leftGraphValues = _totalConsumption.Select(x => {
            return new ChartDataL(
                      x.value - minValue.value,
                      x.name,
                      x.date,
                      x.source);
          });
      });
    }
}

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject NavigationManager NavigationManager;
@inject IOzdsTimeseriesClient _timeseriesClient;

@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja prošli mjesc(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                  @(Math.Round((decimal)_totalConsumption/1000,2))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja ovaj mjesec(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                  @(Math.Round((decimal)_totalLastMonthConsumption/1000,2))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Trenutna snaga(kW):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                  @(Math.Round((decimal)_totalLastPower/1000,2))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>



    <MudPaper Class="pa-1">
      <MudText Typo="Typo.h4" Class="d-flex justify-center">
        @(T["Tvoje Lokacije"].Value)
      </MudText>
      <MudDivider />
      @foreach(ExpandThing dataStruct in _shownSubnets.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Lokacija"].Value: @dataStruct.data.system.DisplayText
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => InspectSubnet(dataStruct.data.system)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja trenutni mjesec"].Value: @(Math.Round((decimal)dataStruct.data.consumption/1000,2) + " kWh")
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja prošli mjesec"].Value: @(Math.Round((decimal)dataStruct.data.lastMonthConsumption/1000,2) + " kWh")
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Trenutna snaga"].Value: @(Math.Round((decimal)dataStruct.data.lastPower/1000,2) + " kW")
            </MudItem>
          </MudGrid>
        </MudStack>
      </MudPaper>
      }
    </MudPaper>
  </MudHidden>


@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudGrid Class="my-3">
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja prošlog mjeseca(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" Style="height: 80%;" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h1">
                  @(Math.Round((decimal)_totalConsumption/1000,2))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja ovaj mjesec(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" Style="height: 80%;" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h1">
                  @(Math.Round((decimal)_totalLastMonthConsumption/1000,2))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Trenutna snaga(kW):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" Style="height: 80%;" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h1">
                  @(Math.Round((decimal)_totalLastPower/1000,2))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>



    <MudDataGrid
      T="TabularData"
      MultiSelection="true"
      Items="@_dataStruct"
      SortMode="SortMode.Multiple"
      Filterable="true"
      QuickFilter="@_quickFilter">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@T["Tvoje Lokacije"]</MudText>
        <MudSpacer />
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="@T["Pretraži"].Value"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="MudBlazor.Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns>
        <TemplateColumn Title="@T["Lokacije"].Value"

           >
            <CellTemplate>
                <MudStack Row>
                  <MudButton OnClick="() => InspectSubnet(context.Item.system)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                    @context.Item.system.DisplayText
                  </MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Potrošnja trenutni mjesec"].Value'>
            <CellTemplate>
                @(Math.Round((decimal)context.Item.consumption/1000,2) + " kWh")
            </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Potrošnja prošli mjesec"].Value'>
            <CellTemplate>
                @(Math.Round((decimal)context.Item.lastMonthConsumption/1000,2) + " kWh")
            </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Trenutna snaga"].Value'>
            <CellTemplate>
                @(Math.Round((decimal)context.Item.lastPower/1000,2) + " kW")
            </CellTemplate>
      </PropertyColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="TabularData" />
      </PagerContent>
    </MudDataGrid>
  </MudHidden>




@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private IEnumerable<ContentItem>? _ioTDevices;
    private string? _searchString;
    private IEnumerable<ContentItem>? _systems;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    public record struct TabularData(ContentItem system, decimal consumption, decimal lastMonthConsumption, decimal lastPower);
    private ClosedDistributionSystemDiagnostics? _diagnostics;
    private ClosedDistributionSystemDiagnostics? _lastMonthDiagnostics;
    private IReadOnlyList<Measurement>? _lastMeasurements;
    private decimal _totalConsumption = 0;
    private decimal _totalLastMonthConsumption = 0;
    private decimal _totalLastPower = 0;
    private List<TabularData> _dataStruct = new List<TabularData>();
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
        _systems = await session
          .Query<ContentItem, ClosedDistributionSystemIndex>()
          .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
          .ListAsync();
        _ioTDevices = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
          .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
          .Where(index => !index.IsMessenger)
          .ListAsync();
      });
      if(_ioTDevices is not null){
        _diagnostics = await _timeseriesClient.GetClosedDistributionSystemDiagnostics(_ioTDevices.Select(x => x.DisplayText).ToList(),nowMonth, DateTime.UtcNow);
        _lastMonthDiagnostics = await _timeseriesClient.GetClosedDistributionSystemDiagnostics(_ioTDevices.Select(x => x.DisplayText).ToList(),nowMonth.AddMonths(-1), nowMonth);
        _lastMeasurements = await _timeseriesClient.GetLastMeasurements(_ioTDevices.Select(x => x.DisplayText).ToList(),nowMonth, DateTime.UtcNow);
      }

      if(_systems is not null && _diagnostics is not null  && _lastMonthDiagnostics is not null && _lastMeasurements is not null){
        foreach(var sub in _systems){
          var totalLastPower = _lastMeasurements.Sum(x => x.ActivePower_W);
          _dataStruct.Add( new TabularData{system = sub, consumption = _diagnostics.Consumption_kWh, lastMonthConsumption = _lastMonthDiagnostics.Consumption_kWh, lastPower = totalLastPower});
          _shownSubnets.Add( new ExpandThing{data = new TabularData{system = sub, consumption = _diagnostics.Consumption_kWh, lastMonthConsumption = _lastMonthDiagnostics.Consumption_kWh, lastPower = totalLastPower}, show = true, expand = false});
          _totalConsumption += _diagnostics.Consumption_kWh;
          _totalLastMonthConsumption += _lastMonthDiagnostics.Consumption_kWh;
          _totalLastPower += totalLastPower;
        }
      }
  }

  private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.system.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private string GetEmail(ContentItem user) {
    return user.As<LegalEntityPart>().Email.Text;
  }
  private void InspectSubnet(ContentItem item) {
      NavigationManager.NavigateTo($"app/subnet/{item.ContentItemId}");
  }


@* MOBILE *@
  public string TextValue { get; set; } = "";
  private class ExpandThing {
    public TabularData data = default!;
    public bool expand;
    public bool show;
  }
  List<ExpandThing> _shownSubnets = new();
  private void OnExpandCollapseClick(string id) {
    var a = _shownSubnets.Where(x => x.data.system.ContentItemId == id).FirstOrDefault();
    a.expand = !a.expand;
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownSubnets)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownSubnets.Where(x => x.data.system.DisplayText.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}

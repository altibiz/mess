@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject NavigationManager NavigationManager;
@inject IOzdsTimeseriesClient _timeseriesClient;

@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja prošli mjesc(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                  @(_totalLastMonthConsumption is null ? null : DecimalString((decimal)_totalLastMonthConsumption/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja ovaj mjesec(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                  @(_totalConsumption is null ? null : DecimalString((decimal)_totalConsumption/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Trenutna snaga(kW):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                  @(_totalLastPower is null ? null : DecimalString((decimal)_totalLastPower/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>



      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Tvoje Lokacije"].Value)
      </MudText>
      @foreach(ExpandThing dataStruct in _shownSubnets.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Lokacija"].Value: @dataStruct.data.system.DisplayText
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => InspectSubnet(dataStruct.data.system)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja trenutni mjesec"].Value: @(dataStruct.data.consumption is null ? null : DecimalString((decimal)dataStruct.data.consumption/1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja prošli mjesec"].Value: @(dataStruct.data.lastMonthConsumption is null ? null : DecimalString((decimal)dataStruct.data.lastMonthConsumption/1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Trenutna snaga"].Value: @(dataStruct.data.lastPower is null ? null : DecimalString((decimal)dataStruct.data.lastPower/1000, 0) + " kW")
            </MudItem>
          </MudGrid>
        </MudStack>
      </MudPaper>
      }
  </MudHidden>


@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudGrid Class="my-3">
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja ovaj mjesec(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" MaxWidth="MaxWidth.Small" Style="height: 100%;">
              <MudText Typo="Typo.h1">
                  @(_totalConsumption is null ? null : DecimalString((decimal)_totalConsumption/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Potrošnja prošlog mjeseca(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" MaxWidth="MaxWidth.Small" Style="height: 75%;">
              <MudText Typo="Typo.h1">
                  @(_totalLastMonthConsumption is null ? null : DecimalString((decimal)_totalLastMonthConsumption/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="4">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h5">
                @(T["Trenutna snaga(kW):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" MaxWidth="MaxWidth.Small" Style="height: 100%;">
              <MudText Typo="Typo.h1">
                  @(_totalLastPower is null ? null : DecimalString((decimal)_totalLastPower/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>



    <MudDataGrid
      T="TabularData"
      MultiSelection="true"
      Items="@_dataStruct"
      SortMode="SortMode.Multiple"
      Filterable="true"
      QuickFilter="@_quickFilter">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@T["Tvoje Lokacije"]</MudText>
        <MudSpacer />
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="@T["Pretraži"].Value"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="MudBlazor.Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns>
        <TemplateColumn Title="@T["Lokacije"].Value"

           >
            <CellTemplate>
                <MudStack Row>
                  <MudButton OnClick="() => InspectSubnet(context.Item.system)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                    @context.Item.system.DisplayText
                  </MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Potrošnja trenutni mjesec"].Value'>
            <CellTemplate>
                @(context.Item.consumption is null ? null : DecimalString((decimal)context.Item.consumption/1000, 0) + " kWh")
            </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Potrošnja prošli mjesec"].Value'>
            <CellTemplate>
                @(context.Item.lastMonthConsumption is null ? null : DecimalString((decimal)context.Item.lastMonthConsumption/1000, 0) + " kWh")
            </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.consumption"
        Title='@T["Trenutna snaga"].Value'>
            <CellTemplate>
                @(context.Item.lastPower is null ? null : DecimalString((decimal)context.Item.lastPower/1000, 0) + " kW")
            </CellTemplate>
      </PropertyColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="TabularData" />
      </PagerContent>
    </MudDataGrid>
  </MudHidden>




@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth = new(0, 0, DateTime.UtcNow);
    private IEnumerable<ContentItem>? _ioTDevices;
    private string? _searchString;
    private IEnumerable<ContentItem>? _systems;
    public record struct TabularData(ContentItem system, decimal? consumption, decimal? lastMonthConsumption, decimal? lastPower);
    private decimal? _diagnostics = 0;
    private decimal? _lastMonthDiagnostics = 0;
    private decimal? _lastMeasurements = 0;
    private decimal? _totalConsumption = 0;
    private decimal? _totalLastMonthConsumption = 0;
    private decimal? _totalLastPower = 0;
    private List<TabularData> _dataStruct = new List<TabularData>();
    private IReadOnlyList<AbbEnergyRange>? _abbRange;
    private IReadOnlyList<SchneiderEnergyRange>? _schneiderRange;
    private IReadOnlyList<AbbEnergyRange>? _abbRangeLastMonth;
    private IReadOnlyList<SchneiderEnergyRange>? _schneiderRangeLastMonth;
    private IReadOnlyList<AbbMeasurement>? _abbLast;
    private IReadOnlyList<SchneiderMeasurement>? _schneiderLast;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private DateTimeOffset now = DateTimeOffset.UtcNow;
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
        _systems = await session
          .Query<ContentItem, ClosedDistributionSystemIndex>()
          .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
          .ListAsync();
        if(_systems is not null){
          foreach(var sub in _systems){
            var ioTDevices = await session
              .Query<ContentItem, OzdsIotDeviceIndex>()
              .Where(index => index.ClosedDistributionSystemContentItemId == sub.ContentItemId)
              .Where(index => !index.IsMessenger)
              .ListAsync();
          if(ioTDevices is not null){
            _abbRange = await _timeseriesClient.GetBulkAbbMonthlyEnergyRangeAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth,now);
            _abbRangeLastMonth = await _timeseriesClient.GetBulkAbbMonthlyEnergyRangeAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
            _abbLast = await _timeseriesClient.GetBulkLastAbbMeasurementAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText));
            _schneiderRange = await _timeseriesClient.GetBulkSchneiderMonthlyEnergyRangeAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth,now);
            _schneiderRangeLastMonth = await _timeseriesClient.GetBulkSchneiderMonthlyEnergyRangeAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
            _schneiderLast = await _timeseriesClient.GetBulkLastSchneiderMeasurementAsync(ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText));

            foreach(var omm in ioTDevices){
              _startEnd = new();
              if(omm.DisplayText.StartsWith("abb")){
                if(_abbRange is not null &&_abbRange.Count() > 0){
                    var device = _abbRange.Where(x => x.Source == omm.DisplayText).First();
                    _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
                }
                if(_abbRangeLastMonth is not null &&_abbRangeLastMonth.Count() > 0){
                    var deviceLastMonth = _abbRangeLastMonth.Where(x => x.Source == omm.DisplayText).First();
                    _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
                }
                if(_abbLast is not null){
                  var a = _abbLast.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                  if(a is not null)
                    _lastMeasurements += a.ActivePowerL1_W + a.ActivePowerL2_W + a.ActivePowerL3_W;
                }
              }
              else{
                if(_schneiderRange is not null &&_schneiderRange.Count() > 0){
                  var device = _schneiderRange.Where(x => x.Source == omm.DisplayText).First();
                  _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
                }
                if(_schneiderRangeLastMonth is not null &&_schneiderRangeLastMonth.Count() > 0){
                  var deviceLastMonth = _schneiderRangeLastMonth.Where(x => x.Source == omm.DisplayText).First();
                  _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
                }
                if(_schneiderLast is not null){
                  var a = _schneiderLast.Where(x => x.Source == omm.DisplayText).FirstOrDefault();
                  if(a is not null)
                    _lastMeasurements += a.ActivePowerL1_W + a.ActivePowerL2_W + a.ActivePowerL3_W;
                }
              }
              _diagnostics += _startEnd.First - _startEnd.Last;
              _lastMonthDiagnostics += _startEndLastMonth.First - _startEndLastMonth.Last;
            }
            }
            _dataStruct.Add( new TabularData{system = sub, consumption = _diagnostics, lastMonthConsumption = _lastMonthDiagnostics, lastPower = _lastMeasurements});
            _shownSubnets.Add( new ExpandThing{data = new TabularData{system = sub, consumption = _diagnostics, lastMonthConsumption = _lastMonthDiagnostics, lastPower = _lastMeasurements}, show = true, expand = false});
            _totalConsumption += _diagnostics;
            _totalLastMonthConsumption += _lastMonthDiagnostics;
            _totalLastPower += _lastMeasurements;
            _diagnostics = 0;
            _lastMonthDiagnostics = 0;
            _lastMeasurements = 0;
          }
        }
      });


  }

  private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.system.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private string GetEmail(ContentItem user) {
    return user.As<LegalEntityPart>().Email.Text;
  }
  private void InspectSubnet(ContentItem item) {
      NavigationManager.NavigateTo($"app/subnet/{item.ContentItemId}");
  }


@* MOBILE *@
  public string TextValue { get; set; } = "";
  private class ExpandThing {
    public TabularData data = default!;
    public bool expand;
    public bool show;
  }
  List<ExpandThing> _shownSubnets = new();
  private void OnExpandCollapseClick(string id) {
    var a = _shownSubnets.Where(x => x.data.system.ContentItemId == id).FirstOrDefault();
    a.expand = !a.expand;
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownSubnets)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownSubnets.Where(x => x.data.system.DisplayText.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;

@inject IOzdsTimeseriesClient _timeseriesClient

@* MOBILE *@
   <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja prošli mjesc(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                @if(_lastMonthTotal is not null)
                  @(DecimalString((decimal)_lastMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
            <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h6">
                @T["Potrošnja ovaj mjesec(kWh):"].Value
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h4">
                @if(_thisMonthTotal is not null)
                  @(DecimalString((decimal)_thisMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudGrid Class="my-3">
        <MudItem xs="6">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h4">
                @(T["Potrošnja prošlog mjeseca(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" Style="height: 80%;" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h1">
                @if(_lastMonthTotal is not null)
                  @(DecimalString((decimal)_lastMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
        <MudItem xs="6">
          <MudPaper Class="mud-width-full py-8 px-8" Height="300px">
            <MudItem Class="" Style="font-size: large; font-weight: bold;">
              <MudText Typo="Typo.h4">
                @(T["Potrošnja ovaj mjesec(kWh):"].Value)
              </MudText>
            </MudItem>
            <MudContainer Class="d-flex align-center justify-center" Style="height: 80%;" MaxWidth="MaxWidth.Small">
              <MudText Typo="Typo.h1">
                @if(_thisMonthTotal is not null)
                  @(DecimalString((decimal)_thisMonthTotal/1000, 0))
              </MudText>
            </MudContainer>
          </MudPaper>
        </MudItem>
    </MudGrid>
  </MudHidden>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private IEnumerable<ContentItem>? _ioTDevices;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth;
    private decimal? _lastMonthTotal = 0;
    private decimal? _thisMonthTotal = 0;
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
          _ioTDevices = await session
            .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => index.DistributionSystemUnitContentItemId == LegalEntity.ContentItemId)
            .Where(index => !index.IsMessenger)
            .ListAsync();

        if(_ioTDevices is not null){
          foreach(var omm in _ioTDevices){
            if(omm.DisplayText.StartsWith("abb")){
              _startEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(omm.DisplayText, nowMonth, DateTime.UtcNow);
              _startEndLastMonth = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(omm.DisplayText, nowMonth.AddMonths(-1), nowMonth);
            }
            else{
              _startEnd = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(omm.DisplayText, nowMonth, DateTime.UtcNow);
              _startEndLastMonth = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(omm.DisplayText, nowMonth.AddMonths(-1), nowMonth);
            }
            _thisMonthTotal += _startEnd.First - _startEnd.Last;
            _lastMonthTotal += _startEndLastMonth.First - _startEndLastMonth.Last;
          }
        }
      });
    }
  }

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries

@inject IOzdsTimeseriesClient _timeseriesClient

<MudDataGrid
  T="TestTabularData"
  MultiSelection="true"
  Items="@dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter"
  RowClick="@RowClicked">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@T["Meters"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      Property="x => x!.meter.ContentItemId"
      Title='@T["Id"].Value'
      Sortable="false"
      Filterable="false" />
    <PropertyColumn
      Property="x => GetName(x.meter!)"
      Title='@T["Name"].Value' />
    <PropertyColumn
      Property="x => x.abbActivePowerTotalLastWeel"
      Title='@T["Name"].Value' />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TestTabularData" />
  </PagerContent>
</MudDataGrid>

@code {
  [Parameter]
  public Expression<Func<OzdsIotDeviceIndex, bool>>? Where { get; set; }

  public record struct TestTabularData(ContentItem meter, decimal abbActivePowerTotalLastWeel);

  private List<TestTabularData> dataStruct = new List<TestTabularData>();

  private IEnumerable<ContentItem>? _meters;

  private string? _searchString;

  private IReadOnlyList<AbbMeasurement> _allMeasurments;

  private decimal _abbActivePowerTotalLastWeel = 0;

  private Func<TestTabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.meter.As<IotDevicePart>().DeviceId.Text
        .Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private string GetName(ContentItem meter) {
    return meter.As<IotDevicePart>().DeviceId.Text;
  }

  private void RowClicked() { }

  protected override async Task OnInitializedAsync()
  {
    await WithTransientSessionAsync(async session => {
      var query = session.Query<ContentItem, OzdsIotDeviceIndex>();
      if (Where is not null) {
        query = query.Where(Where);
      }

      _meters = await query.ListAsync();
    });
      _allMeasurments = await _timeseriesClient.GetAbbMeasurementsAsync("abb", DateTimeOffset.UtcNow.AddDays(-7), DateTimeOffset.UtcNow);
      foreach(var abbMeasurment in _allMeasurments){
        _abbActivePowerTotalLastWeel += abbMeasurment.ActivePowerTotal_W ?? 0;
      }
      foreach(var meter in _meters){
        dataStruct.Add(
          new TestTabularData(meter, _abbActivePowerTotalLastWeel)
        );
      }
  }
}

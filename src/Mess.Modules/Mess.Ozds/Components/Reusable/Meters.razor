@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions

<MudDataGrid
  T="ContentItem"
  MultiSelection="true"
  Items="@_meters"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter"
  RowClick="@RowClicked">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@T["Meters"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      Property="x => x!.ContentItemId"
      Title='@T["Id"].Value'
      Sortable="false"
      Filterable="false" />
    <PropertyColumn
      Property="x => GetName(x!)"
      Title='@T["Name"].Value' />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="ContentItem" />
  </PagerContent>
</MudDataGrid>

@code {
  [Parameter]
  public Expression<Func<OzdsIotDeviceIndex, bool>>? Where { get; set; }

  private IEnumerable<ContentItem>? _meters;

  private string? _searchString;

  private Func<ContentItem, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.As<IotDevicePart>().DeviceId.Text
        .Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private string GetName(ContentItem meter) {
    return meter.As<IotDevicePart>().DeviceId.Text;
  }

  private void RowClicked() { }

  protected override async Task OnInitializedAsync()
  {
    await WithTransientSessionAsync(async session => {
      var query = session.Query<ContentItem, OzdsIotDeviceIndex>();
      if (Where is not null) {
        query = query.Where(Where);
      }

      _meters = await query.ListAsync();
    });
  }
}

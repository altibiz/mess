@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject NavigationManager NavigationManager
@inject IOzdsTimeseriesClient _timeseriesClient
@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
      <MudText Typo="Typo.h4" Class="d-flex">
        @T["Brojila"]
      </MudText>
    <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži" Variant="Variant.Text"></MudTextField>
    @foreach(ExpandThing dataStruct in _shownOMMs.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
              <MudGrid Class="d-flex pa-2">
                <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
                  @T["Brojilo"].Value: @dataStruct.omm.source
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center justify-end">
                  <MudIconButton OnClick="() => InspectOMM(dataStruct.omm.source)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
                </MudItem>
              </MudGrid>
              <MudGrid Class="d-flex pa-2">
                <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight:bold;">
                  @T["Zadnji obračun"].Value: @(dataStruct.omm.lastInvoiceTotal is null ? null : DecimalString((decimal)dataStruct.omm.lastInvoiceTotal)) €
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center justify-end">
                  <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.omm.source)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
                </MudItem>
              </MudGrid>

          <MudCollapse Class="py-2" Expanded="_shownOMMs.Where(x => x.omm.source == dataStruct.omm.source).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["Potrošnja tekućeg mjeseca"].Value: @(dataStruct.omm.thisMonthUsage is null ? null : DecimalString((decimal)dataStruct.omm.thisMonthUsage/1000, 0) + " kWh")
              </MudContainer>
              <MudContainer>
                @T["Potrošnja prošlog mjeseca"].Value: @(dataStruct.omm.lastMonthUsage is null ? null : DecimalString((decimal)dataStruct.omm.lastMonthUsage/1000, 0) + " kWh")
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
    }
  </MudHidden>


@* DESKTOP *@
          <MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudDataGrid
  T="(string source, decimal? lastInvoiceTotal, decimal? thisMonthUsage, decimal? lastMonthUsage)"
  MultiSelection="true"
  Items="@_lastTotalPerOMM"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@T["Brojila"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <TemplateColumn Title="@T["Brojilo"].Value" Sortable="false"

       >
      <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectOMM(context.Item.source)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
              @context.Item.source
            </MudButton>
          </MudStack>
      </CellTemplate>
    </TemplateColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.thisMonthUsage"
      Title='@T["Potrošnja tekućeg mjeseca"].Value'>
          <CellTemplate>
                @if(context.Item.thisMonthUsage is not null)
                @(DecimalString((decimal)context.Item.thisMonthUsage/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.lastMonthUsage"
      Title='@T["Potrošnja prošlog mjeseca"].Value'>
          <CellTemplate>
                @if(context.Item.lastMonthUsage is not null)
                @(DecimalString((decimal)context.Item.lastMonthUsage/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.lastInvoiceTotal"
      Title='@T["Zadnji obračun"].Value'>
          <CellTemplate>
                @if(context.Item.lastInvoiceTotal is not null)
                @(DecimalString((decimal)context.Item.lastInvoiceTotal) + " €")
          </CellTemplate>
      </PropertyColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="(string source, decimal? lastInvoiceTotal, decimal? thisMonthUsage, decimal? lastMonthUsage)" />
  </PagerContent>
</MudDataGrid>
          </MudHidden>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    public string TextValue { get; set; } = "";
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth = new(0, 0, DateTime.UtcNow);
    private class ExpandThing {
      public (string source, decimal? lastInvoiceTotal, decimal? thisMonthUsage, decimal? lastMonthUsage) omm;
      public bool expand;
      public bool show;
    }
    List<ExpandThing> _shownOMMs = new();
    private IEnumerable<ContentItem> _units = Enumerable.Empty<ContentItem>();
    private List<(decimal total, string source)> _lastMonthCosts = new();
    private List<ContentItem> _unitsOMMs = new();
    private string? _searchString;
    private List<(string source, decimal? lastInvoiceTotal, decimal? thisMonthUsage, decimal? lastMonthUsage)> _lastTotalPerOMM = new();
    private IReadOnlyList<AbbEnergyRange>? _abbRange;
    private IReadOnlyList<SchneiderEnergyRange>? _schneiderRange;
    private IReadOnlyList<AbbEnergyRange>? _abbRangeLastMonth;
    private IReadOnlyList<SchneiderEnergyRange>? _schneiderRangeLastMonth;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private DateTimeOffset now = DateTimeOffset.UtcNow;
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
      if(LegalEntity.ContentType == "DistributionSystemUnit"){
        _units = new List<ContentItem> {LegalEntity};
        var _ioTDevices = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => !index.IsMessenger)
          .Where(x => x.DistributionSystemUnitContentItemId == _units.First().ContentItemId)
          .ListAsync();
        var invoices = await session.Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
          .Where(index => index.RecipientContentItemId == _units.First().ContentItemId)
          .ListAsync();
        var consumption = _units.First().As<DistributionSystemUnitPart>().Consumption;
        if(_ioTDevices is not null){
          _abbRange = await _timeseriesClient.GetBulkAbbMonthlyEnergyRangeAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth,now);
          _abbRangeLastMonth = await _timeseriesClient.GetBulkAbbMonthlyEnergyRangeAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("abb")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
          _schneiderRange = await _timeseriesClient.GetBulkSchneiderMonthlyEnergyRangeAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth,now);
          _schneiderRangeLastMonth = await _timeseriesClient.GetBulkSchneiderMonthlyEnergyRangeAsync(_ioTDevices.Where(x => x.DisplayText.StartsWith("schneider")).Select(x => x.DisplayText),nowMonth.AddMonths(-1),nowMonth);
          foreach(var omm in _ioTDevices){
            _startEnd = new();
            if(omm.DisplayText.StartsWith("abb")){
              if(_abbRange is not null &&_abbRange.Count() > 0){
                var device = _abbRange.Where(x => x.Source == omm.DisplayText).First();
                _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
              }
              if(_abbRangeLastMonth is not null &&_abbRangeLastMonth.Count() > 0){
                var deviceLastMonth = _abbRangeLastMonth.Where(x => x.Source == omm.DisplayText).First();
                _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
              }
            }
            else{
              if(_schneiderRange is not null &&_schneiderRange.Count() > 0){
                var device = _schneiderRange.Where(x => x.Source == omm.DisplayText).First();
                _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
              }
              if(_schneiderRangeLastMonth is not null &&_schneiderRangeLastMonth.Count() > 0){
                var deviceLastMonth = _schneiderRangeLastMonth.Where(x => x.Source == omm.DisplayText).First();
                _startEndLastMonth = (deviceLastMonth.ActiveEnergyImportTotalMax_Wh, deviceLastMonth.ActiveEnergyImportTotalMin_Wh, deviceLastMonth.Timestamp);
              }
            }
            ContentItem lastInvoice = invoices.OrderBy(x => x.As<InvoicePart>().Date.Value.Value).Last();
            var lastMonth = lastInvoice.As<OzdsCalculationPart>().Calculations.Where(x => x.IotDevice.DisplayText == omm.DisplayText).FirstOrDefault();
            if(lastMonth is not null){
              _lastTotalPerOMM.Add(new (omm.DisplayText, lastMonth.Total, _startEnd.First - _startEnd.Last, _startEndLastMonth.First - _startEndLastMonth.Last));
              _shownOMMs.Add(new ExpandThing{omm = (source: omm.DisplayText, lastMonthTotal: lastMonth.Total, _startEnd.First - _startEnd.Last, _startEndLastMonth.First - _startEndLastMonth.Last), show = true, expand = false});
            }
          }
        }
      }
      });
    }
     private Func<(string source, decimal? lastInvoiceTotal, decimal? thisMonthUsage, decimal? lastMonthUsage), bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.source.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };
  private void InspectOMM(string item) {
      NavigationManager.NavigateTo($"app/omm/{item}");
  }
private void OnExpandCollapseClick(string ommId) {
      var a = _shownOMMs.Where(x => x.omm.source == ommId).FirstOrDefault();
      a.expand = !a.expand;
  }
private Task Filter(string value) {
  TextValue = value;
  foreach (var inv in _shownOMMs)
  {
    if(value.Trim() != ""){
      inv.show = false;
    }
  };
  var a = _shownOMMs.Where(x => x.omm.source.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
  foreach (var inv in a)
  {
      inv.show = true;
  };
  StateHasChanged();
  return Task.CompletedTask;
}
}

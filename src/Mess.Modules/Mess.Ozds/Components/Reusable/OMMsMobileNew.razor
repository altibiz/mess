@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject NavigationManager NavigationManager
@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudPaper Class="pa-1">
      <MudText Typo="Typo.h4" Class="d-flex justify-center pa-1">
        @T["Brojila"]
      </MudText>
      <MudDivider />
    <MudTextField Class="pa-3" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži" Variant="Variant.Text"></MudTextField>
    @foreach(ExpandThing dataStruct in _shownOMMs.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
              <MudGrid Class="d-flex pa-2">
                <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
                  @T["Brojilo"].Value: @dataStruct.omm.source
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center justify-end">
                  <MudIconButton OnClick="() => InspectOMM(dataStruct.omm.source)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
                </MudItem>
              </MudGrid>
              <MudGrid Class="d-flex pa-2">
                <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight:bold;">
                  @T["Potrošnja"].Value: @(Math.Round((decimal)dataStruct.omm.lastImport/1000,2)) kWh
                </MudItem>
                <MudItem xs="2" Class="d-flex align-center justify-end">
                  <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.omm.source)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
                </MudItem>
              </MudGrid>

          <MudCollapse Class="py-2" Expanded="_shownOMMs.Where(x => x.omm.source == dataStruct.omm.source).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              @* <MudContainer>
                @T["Ukupna potrošnja"].Value: @(dataStruct.omm.consumption) €
              </MudContainer>
              <MudContainer>
                @T["Broj računa"].Value: @(dataStruct.omm.invoiceCount)
              </MudContainer> *@
              <MudContainer>
                @T["Obračuni ovog mjeseca"].Value: @(dataStruct.omm.thisMonthTotal + " €")
              </MudContainer>
              <MudContainer>
                @T["Obračuni prošlog mjeseca"].Value: @(dataStruct.omm.lastMonthTotal + " €")
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
    }
    </MudPaper>
  </MudHidden>


@* DESKTOP *@
          <MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudDataGrid
  T="(string source, decimal? lastImport, decimal? consumption, int invoiceCount, decimal? lastMonthTotal, decimal? thisMonthTotal)"
  MultiSelection="true"
  Items="@_lastTotalPerOMM"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@T["Brojila"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <TemplateColumn Title="@T["Brojilo"].Value" Sortable="false"

       >
      <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectOMM(context.Item.source)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
              @context.Item.source
            </MudButton>
          </MudStack>
      </CellTemplate>
    </TemplateColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.consumption"
      Title='@T["Ukupna potrošnja"].Value'>
          <CellTemplate>
              @(Math.Round((decimal)context.Item.lastImport/1000,2) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    @* <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.lastImport"
      Title='@T["Zadnji import"].Value'/>
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.invoiceCount"
      Title='@T["Broj računa"].Value'/> *@
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.thisMonthTotal"
      Title='@T["Obračuni ovog mjeseca"].Value'>
          <CellTemplate>
              @(context.Item.thisMonthTotal + " €")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.lastMonthTotal"
      Title='@T["Obračuni prošlog mjeseca"].Value'>
          <CellTemplate>
              @(context.Item.lastMonthTotal + " €")
          </CellTemplate>
      </PropertyColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="(string source, decimal? lastImport, decimal? consumption, int invoiceCount, decimal? lastMonthTotal, decimal? thisMonthTotal)" />
  </PagerContent>
</MudDataGrid>
          </MudHidden>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    public string TextValue { get; set; } = "";
    private class ExpandThing {
      public (string source, decimal? lastImport, decimal? consumption, int invoiceCount, decimal? lastMonthTotal, decimal? thisMonthTotal) omm;
      public bool expand;
      public bool show;
    }
    List<ExpandThing> _shownOMMs = new();
    private IEnumerable<ContentItem> _units = Enumerable.Empty<ContentItem>();
    private List<(decimal total, string source)> _lastMonthCosts = new();
    private List<(decimal total, string source)> _thisMonthCosts = new();
    private List<(ContentItem omm, decimal? consumption, int invoiceCount)> _unitsOMMs = new List<(ContentItem omm, decimal? consumption, int invoiceCount)>();
    private string? _searchString;
    private List<(string source, decimal? lastImport, decimal? consumption, int invoiceCount, decimal? lastMonthTotal, decimal? thisMonthTotal)> _lastTotalPerOMM = new();
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
      if(LegalEntity.ContentType == "DistributionSystemUnit"){
        _units = new List<ContentItem> {LegalEntity};
        var omms = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => !index.IsMessenger)
          .Where(x => x.DistributionSystemUnitContentItemId == _units.First().ContentItemId)
          .ListAsync();
        var invoiceCount = await session.Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
          .Where(index => index.RecipientContentItemId == _units.First().ContentItemId)
          .ListAsync();
        foreach(var invoice in invoiceCount){

        }
        var consumption = _units.First().As<DistributionSystemUnitPart>().Consumption;
        foreach(var omm in omms){
          // TODO: change DateTime.UtcNow.AddMonths(-0).Month to be -1
          List<List<OzdsCalculationData>> thisMonthInvoices = invoiceCount.Where(x => x.As<InvoicePart>().Date.Value.Value.Month == DateTime.UtcNow.AddMonths(-0).Month).Select(x => x.As<OzdsCalculationPart>().Calculations).ToList();
          List<List<OzdsCalculationData>> lastMonthInvoices = invoiceCount.Where(x => x.As<InvoicePart>().Date.Value.Value.Month == DateTime.UtcNow.AddMonths(-1).Month).Select(x => x.As<OzdsCalculationPart>().Calculations).ToList();
          foreach(var calc in lastMonthInvoices){
            foreach(var cal in calc){
              _lastMonthCosts.Add((cal.Total, cal.IotDevice.DisplayText));
            }
          }
          foreach(var calc in thisMonthInvoices){
            foreach(var cal in calc){
              _thisMonthCosts.Add((cal.Total, cal.IotDevice.DisplayText));
            }
          }
          _unitsOMMs.Add((omm, consumption, invoiceCount.Count()));
        }
      }
      @* else{
        _units = await session
            .Query<ContentItem, DistributionSystemUnitIndex>()
            .Where(x => x.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
            .ListAsync();
        var unitIds = _units.Select(unit => unit.ContentItemId).ToList();
        //TODO: DO NOT USE FOREACH WHEN TALKING TO DB
        foreach(var unit in unitIds){
          var omms = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => !index.IsMessenger)
          .Where(x => x.DistributionSystemUnitContentItemId == unit)
          .ListAsync();
        var invoiceCount = await session.Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
          .Where(index => index.RecipientContentItemId == unit).ListAsync();
        var consumption = _units.First().As<DistributionSystemUnitPart>().Consumption;
        foreach(var omm in omms){
          List<List<OzdsCalculationData>> b = invoiceCount.Select(x => x.As<OzdsCalculationPart>().Calculations).ToList();
          foreach(var calc in b){
            foreach(var cal in calc){
              _lastMonthCosts.Add((cal.Total, cal.IotDevice.DisplayText));
            }
          }
          _unitsOMMs.Add((omm, consumption, invoiceCount.Count()));
        }
        }
      }*@

      foreach(var omm in _unitsOMMs){
        var totalLastMonth = _lastMonthCosts.Where(x => x.source == omm.omm.DisplayText).Sum(x => x.total);
        var totalThisMonth = _thisMonthCosts.Where(x => x.source == omm.omm.DisplayText).Sum(x => x.total);
        _lastTotalPerOMM.Add(new (omm.omm.As<IotDevicePart>().DeviceId.Text, omm.omm.As<OzdsIotDevicePart>().LatestImport, omm.consumption, omm.invoiceCount, totalLastMonth, totalThisMonth));
        _shownOMMs.Add(new ExpandThing{omm = (source: omm.omm.As<IotDevicePart>().DeviceId.Text, lastImport: omm.omm.As<OzdsIotDevicePart>().LatestImport, consumption: omm.consumption, invoiceCount: omm.invoiceCount, lastMonthTotal: totalLastMonth, thisMonthTotal: totalThisMonth), show = true, expand = false});
      }
      });
    }
     private Func<(string source, decimal? lastImport, decimal? consumption, int invoiceCount, decimal? lastMonthTotal, decimal? thisMonthTotal), bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.source.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };
  private void InspectOMM(string item) {
      NavigationManager.NavigateTo($"app/omm/{item}");
  }
private void OnExpandCollapseClick(string ommId) {
      var a = _shownOMMs.Where(x => x.omm.source == ommId).FirstOrDefault();
      a.expand = !a.expand;
  }
private Task Filter(string value) {
  TextValue = value;
  foreach (var inv in _shownOMMs)
  {
    if(value.Trim() != ""){
      inv.show = false;
    }
  };
  var a = _shownOMMs.Where(x => x.omm.source.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
  foreach (var inv in a)
  {
      inv.show = true;
  };
  StateHasChanged();
  return Task.CompletedTask;
}
}

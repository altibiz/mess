@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using Mess.Billing.Abstractions.Indexes
@using Mess.Cms.Extensions.OrchardCore

@inject NavigationManager NavigationManager

@if(_shownInvoices is not null && _shownInvoices.Count() > 0){
@* MOBILE *@
          <MudHidden Breakpoint="Breakpoint.LgAndUp">
      <MudText Typo="Typo.h4" Class="d-flex">
        @T["Računi"]
      </MudText>
    <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži" Variant="Variant.Text"></MudTextField>
    @foreach(ExpandThing dataStruct in _shownInvoices.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
      <MudStack Spacing="0">
            <MudGrid Class="d-flex pa-2">
              <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: medium;">
                @T["Broj Računa"].Value: @dataStruct.invoice.ContentItemId
              </MudItem>
              <MudItem xs="2" Class="d-flex align-center  justify-end">
                <MudIconButton OnClick="() => InspectInvoice(dataStruct.invoice)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
              </MudItem>
              <MudItem xs="6" Class="d-flex align-center justify-start" Style="font-size: medium;">
                @T["Od"].Value: @(dataStruct.invoice.As<OzdsInvoicePart>().Data.From.Date.ToShortDateString())
              </MudItem>
              <MudItem xs="6" Class="d-flex align-center justify-start" Style="font-size: medium;">
                @T["Do"].Value: @(dataStruct.invoice.As<OzdsInvoicePart>().Data.To.Date.ToShortDateString())
              </MudItem>
              <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight:bold;">
                @T["Ukupni iznos"].Value:@(DecimalString((decimal)dataStruct.invoice.As<OzdsInvoicePart>().Data.TotalWithTax)) €
              </MudItem>
                <MudItem xs="2" Class="d-flex align-center justify-end">
                  <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.invoice.ContentItemId)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
                </MudItem>
            </MudGrid>

        <MudCollapse Class="py-2" Expanded="_shownInvoices.Where(x => x.invoice.ContentItemId == dataStruct.invoice.ContentItemId).First().expand">
                <MudStack>
                  <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
                  <MudContainer>
                    @T["Korisnik (mreže)"].Value: @(dataStruct.invoice.As<OzdsInvoicePart>().Data.DistributionSystemUnit.DisplayText)
                  </MudContainer>
                </MudStack>
        </MudCollapse>
      </MudStack>
      </MudPaper>
    }
          </MudHidden>


@* DESKTOP *@
          <MudHidden Breakpoint="Breakpoint.MdAndDown">
            <MudDataGrid
  T="ContentItem"
  MultiSelection="true"
  Items="@_orderedInvoices"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@T["Računi"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns >
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.As<OzdsInvoicePart>().Data.DistributionSystemUnit.DisplayText"
      Title='@T["Korisnik (mreže)"].Value' Sortable="false"/>
    <PropertyColumn
      CellStyle="font-size: x-large; text-align: end !important;"
      Property="x => x.As<OzdsInvoicePart>().Data.TotalWithTax"
      Title='@T["Ukupno"].Value'>
          <CellTemplate>
              @(DecimalString((decimal)context.Item.As<OzdsInvoicePart>().Data.TotalWithTax) + " €")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.As<OzdsInvoicePart>().Data.From.Date.ToShortDateString()"
      Title='@T["Od"].Value' />
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.As<OzdsInvoicePart>().Data.To.Date.ToShortDateString()"
      Title='@T["Do"].Value' />
    <PropertyColumn
      Property="x => x.ContentItemId"
      Title='@T["Broj Računa"].Value' Sortable="false" CellClass="">
          <CellTemplate>
            <MudText>
              @(context.Item.ContentItemId)
            </MudText>
          </CellTemplate>
      </PropertyColumn>
    <TemplateColumn CellClass="d-flex justify-center"  Sortable="false" Filterable="false">
        <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectInvoice(context.Item)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                @T["Pregled"]
              </MudButton>
            </MudStack>
        </CellTemplate>
    </TemplateColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="ContentItem" />
  </PagerContent>
</MudDataGrid>
          </MudHidden>
}

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    public string TextValue { get; set; } = "";
    private class ExpandThing {
      public ContentItem invoice;
      public bool expand;
      public bool show;
    }
    List<ExpandThing> _shownInvoices = new();
    private string? _searchString;
    private IEnumerable<ContentItem>? _invoices;
    private IEnumerable<ContentItem>? _orderedInvoices;
    protected override async Task OnInitializedAsync()
    {
        await WithTransientSessionAsync(async session => {
            _invoices = await session
              .Query<ContentItem, PaymentIndex>()
              .Where(index => index.IssuerContentItemId == LegalEntity.ContentItemId || index.RecipientContentItemId == LegalEntity.ContentItemId)
              .LatestPublished()
          .ListAsync();
      });
      if(_invoices is not null){
        _orderedInvoices = _invoices.OrderByDescending(x => x.As<InvoicePart>().Date.Value).ToList();
        foreach(var invoice in _orderedInvoices){
          _shownInvoices.Add( new() { invoice = invoice, expand = false, show = true});
        }
      }
  }
  private void OnExpandCollapseClick(string invoiceId) {
        var a = _shownInvoices.Where(x => x.invoice.ContentItemId == invoiceId).FirstOrDefault();
        a.expand = !a.expand;
    }
  private Func<ContentItem, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.As<OzdsInvoicePart>().Data.DistributionSystemUnit.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };
  private void InspectInvoice(ContentItem item) {
      NavigationManager.NavigateTo($"app/invoice/{item.ContentItemId}");
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownInvoices)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownInvoices.Where(x => x.invoice.As<OzdsInvoicePart>().Data.DistributionSystemUnit.DisplayText.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;

@inject IOzdsTimeseriesClient _timeseriesClient
@if(_lastAbbPower is not null || _lastSchneiderPower is not null){
@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
      <MudItem xs="12" Class="pa-1">
          <OMMGraph Source="@Source" />
        </MudItem>
        <MudItem xs="12" Class="pa-1">
            <MudPaper Class="d-flex align-center justify-start mud-width-full pa-1 flex-column">
              <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
                @(T["Trenutna snaga"].Value + ": " + Source)
              </MudItem>
        <MudContainer MaxWidth="MaxWidth.Small">
                <ApexChart TItem="Order"
                          Options="options"
                          >
                    <ApexPointSeries TItem="Order"
                                    Items="orders"
                                    SeriesType=SeriesType.RadialBar
                                    Name="@T["Potrošnja"].Value"
                                    XValue="@(e => DecimalString((decimal)e.value/1000, 0) + " kW")"
                                    YAggregate="@(e =>  Math.Round(e.First().percent ?? 0M, 2))"
                                    OrderByDescending="e=>e.X" />
                  <MudText Typo="Typo.body1" Color="MudBlazor.Color.Warning" Style="font-weight: bold;margin-top: -30px;text-align: center;" Class="m-0">
                    @T["U usporedbi sa prema maksimalnoj snazi prošlog mjeseca"].Value
                  </MudText>
                </ApexChart>
        </MudContainer>
            </MudPaper>
        </MudItem>
    </MudGrid>

      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Brojilo"].Value + ": " + Source)
      </MudText>
      @foreach(ExpandThing dataStruct in _shownOMMs.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="5" Class="d-flex align-center justify-start" Style="font-weight: bold;">
              @T["Godina"].Value: @dataStruct.data.year
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-start" Style="font-weight: bold;">
              @T["Mjesec"].Value: @dataStruct.data.month
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.year, dataStruct.data.month)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
            </MudItem>
          </MudGrid>
          <MudCollapse Class="py-1" Expanded="_shownOMMs.Where(x => x.data.year == dataStruct.data.year).Where(x => x.data.month == dataStruct.data.month).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["Prvo očitanje"].Value:
                @if(dataStruct.data.monthEndTotal is not null)
                @(DecimalString((decimal)dataStruct.data.monthEndTotal/1000, 0)) kWh
              </MudContainer>
              <MudContainer>
                @T["Zadnje očitanje"].Value:
                @if(dataStruct.data.monthStartTotal is not null)
                @(DecimalString((decimal)dataStruct.data.monthStartTotal/1000, 0)) kWh
              </MudContainer>
              <MudContainer Style="font-size: large; font-weight:bold;">
                @T["Ukupna potrošnja"].Value:
                @if(dataStruct.data.monthStartTotal is not null && dataStruct.data.monthEndTotal is not null)
                @(DecimalString((decimal)(dataStruct.data.monthStartTotal - dataStruct.data.monthEndTotal)/1000, 0)) kWh
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
      }
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@(T["Brojilo"].Value + ": " + Source)</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.year"
      Title='@T["Godina"].Value'/>
    <PropertyColumn
      Property="x => x.month"
      Title='@T["Mjesec"].Value' />
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.monthEndTotal"
      Title='@T["Prvo očitanje"].Value'>
          <CellTemplate>
                @if(context.Item.monthEndTotal is not null)
                @(DecimalString((decimal)context.Item.monthEndTotal/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.monthStartTotal"
      Title='@T["Zadnje očitanje"].Value'>
          <CellTemplate>
                @if(context.Item.monthStartTotal is not null)
                @(DecimalString((decimal)context.Item.monthStartTotal/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: xx-large;"
      Property="x => x.monthStartTotal - x.monthEndTotal"
      Title='@T["Ukupna potrošnja"].Value'>
          <CellTemplate>
                @if(context.Item.monthStartTotal is not null && context.Item.monthEndTotal is not null)
                @(DecimalString((decimal)(context.Item.monthStartTotal - context.Item.monthEndTotal)/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>

    <MudGrid Class="my-3">
        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-start mud-width-full py-8 px-8 flex-column" Height="450px">
              <MudItem Class="d-flex" Style="font-size: large; font-weight: bold;">
                @(T["Trenutna snaga"].Value + ": " + Source)
              </MudItem>
        <MudContainer MaxWidth="MaxWidth.Small">
                <ApexChart TItem="Order"
                          Options="options"
                          >
                    <ApexPointSeries TItem="Order"
                                    Items="orders"
                                    SeriesType=SeriesType.RadialBar
                                    Name="@T["Potrošnja"].Value"
                                    XValue="@(e => DecimalString((decimal)e.value/1000, 0) + " kW")"
                                    YAggregate="@(e =>  Math.Round(e.First().percent ?? 0M, 2))"
                                    OrderByDescending="e=>e.X" />
                  <MudText Typo="Typo.body1" Color="MudBlazor.Color.Warning" Style="font-weight: bold;margin-top: -30px;text-align: center;" Class="m-0">
                    @T["U usporedbi sa prema maksimalnoj snazi prošlog mjeseca"].Value
                  </MudText>
                </ApexChart>
        </MudContainer>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
          <OMMGraph Source="@Source" />
        </MudItem>
    </MudGrid>
  </MudHidden>
}
@code {

    [Parameter]
    public string Source { get; set; } = "abb";
    public string TextValue { get; set; } = "";
    private List<Order> orders = new List<Order>();
    private ApexChartOptions<Order> options = new();
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    public record ChartData(decimal? L1, decimal? L2, decimal? L3, DateTimeOffset date);
    public record struct TabularData(int year, int month, decimal? monthStartTotal, decimal? monthEndTotal);
    private int _month = -1;
    private int _year = -1;
    private IReadOnlyList<AbbAggregate>? _abbRange;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRange;
    private IReadOnlyList<AbbAggregate>? _abbRangeLastMonth;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRangeLastMonth;
    private AbbMeasurement? _lastAbbPower;
    private SchneiderMeasurement? _lastSchneiderPower;
    private IReadOnlyList<SchneiderAggregate>? _lastSchneiderMonthPowerRange;
    private IReadOnlyList<AbbAggregate>? _lastAbbMonthPowerRange;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private DateTimeOffset now = DateTime.UtcNow;
  private class Order {
    public decimal? value = 10;
    public decimal? valueMax = 100000;
    public decimal? percent = 50;

    public Order(decimal? val, decimal? max){
      value = val;
      valueMax = max;
      if(valueMax <= 0){
        valueMax = 100000;
      }
      percent = (value / valueMax) * 100;
    }
  }
    private class ExpandThing {
      public TabularData data;
      public bool expand;
      public bool show;
    }
    List<ExpandThing> _shownOMMs = new();
    protected override async Task OnInitializedAsync()
    {
      options.PlotOptions = new PlotOptions { RadialBar = new PlotOptionsRadialBar { StartAngle = -90, EndAngle = 90 } };
      options.DataLabels = new DataLabels() {
        Enabled = true,
        Formatter = @"function(value, opts) {
            return  Math.round(Number(value)) + '%';}"
      };
      options.Xaxis = new XAxis
            {
              Labels = new XAxisLabels{
                Show = false
              }
            };
      options.Yaxis = new();
      options.Yaxis.Add( new YAxis
            {
              Show = true,
              Labels = new YAxisLabels{
                Show = false
              },
              DecimalsInFloat = 2,
              Title = new ApexCharts.AxisTitle () {
                Text = "aa"
              }
            });
      options.Tooltip = new ApexCharts.Tooltip
          {
            Enabled = false,
          };

      _startEnd = new();
      if(Source.StartsWith("abb")){
        _abbRange = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(new List<string>{Source},nowMonth,now);
        _abbRangeLastMonth = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(new List<string>{Source},nowMonth.AddMonths(-1),nowMonth);
        var device = _abbRange.Where(x => x.Source == Source).First();
        _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
        _lastAbbPower = await _timeseriesClient.GetLastAbbMeasurementAsync(Source);
        _lastAbbMonthPowerRange = await _timeseriesClient.GetBulkAbbQuarterHourlyAggregateAsync(new List<string>{Source}, nowMonth.AddMonths(-1), nowMonth);
        if(_lastAbbPower is not null){
          var lastTotalPower = _lastAbbPower.ActivePowerL1_W + _lastAbbPower.ActivePowerL2_W + _lastAbbPower.ActivePowerL3_W;
          var lastMonthMaxPower = 1000000m;
          if(_lastAbbMonthPowerRange.Count() > 0)
            lastMonthMaxPower = _lastAbbMonthPowerRange.Select(x => x.ActivePowerImportAvg_W).Max();
          orders.Add(new Order(lastTotalPower, lastMonthMaxPower));
        }
      }
      else{
        _schneiderRange = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(new List<string>{Source},nowMonth,now);
        _schneiderRangeLastMonth = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(new List<string>{Source},nowMonth,now);
        var device = _schneiderRange.Where(x => x.Source == Source).First();
        _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);
        _lastSchneiderPower = await _timeseriesClient.GetLastSchneiderMeasurementAsync(Source);
        _lastSchneiderMonthPowerRange = await _timeseriesClient.GetBulkSchneiderQuarterHourlyAggregateAsync(new List<string>{Source}, nowMonth.AddMonths(-1), nowMonth);
        if(_lastSchneiderPower is not null){
          var lastTotalPower = _lastSchneiderPower.ActivePowerL1_W + _lastSchneiderPower.ActivePowerL2_W + _lastSchneiderPower.ActivePowerL3_W;
          var lastMonthMaxPower = 1000000m;
          if(_lastSchneiderMonthPowerRange.Count() > 0)
            lastMonthMaxPower = _lastSchneiderMonthPowerRange.Select(x => x.ActivePowerImportAvg_W).Max();
          orders.Add(new Order(lastTotalPower, lastMonthMaxPower));
        }
      }
      if(_startEnd.First != null && _startEnd.Last != null){
        _month = _startEnd.FirstDate.Month;
        _year = _startEnd.FirstDate.Year;
        _dataStruct.Add(new TabularData(_year, _month, _startEnd.First, _startEnd.Last));
        _shownOMMs.Add(new ExpandThing{data = new (_year, _month, _startEnd.First, _startEnd.Last), show = true, expand = false});
      }
    }
  private void OnExpandCollapseClick(int year, int month) {
      var a = _shownOMMs.Where(x => x.data.year == year).Where(x => x.data.month == month).FirstOrDefault();
      if(a is not null)
        a.expand = !a.expand;
  }
}

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject IOzdsTimeseriesClient _timeseriesClient

<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter"
  RowClick="@RowClicked">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@Source</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      Property="x => x.year"
      Title='@T["Year"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.month"
      Title='@T["Month"].Value' />
    <PropertyColumn
      Property="x => x.monthEndTotal"
      Title='@T["Start Total"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.monthStartTotal"
      Title='@T["End Total"].Value'
      Filterable="false" />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>





<MudGrid Class="my-3">
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8" Height="500px">
    <MudContainer MaxWidth="MaxWidth.Small">
            <ApexChart TItem="Order"
                      Title="@Source"
                      Options="options">
                <ApexPointSeries TItem="Order"
                                Items="orders"
                                SeriesType=SeriesType.RadialBar
                                Name="Gross Value"
                                XValue="@(e => e.value)"
                                YAggregate="@(e => e.First().percent)"
                                OrderByDescending="e=>e.X" />
            </ApexChart>
    </MudContainer>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8" Height="500px">
    <MudContainer MaxWidth="MaxWidth.Small">
            <ApexChart TItem="ChartData"
            Title="@Source">
              <ApexPointSeries TItem="ChartData"
                Items="@_lastHour"
                Name="Net Profit"
                SeriesType="SeriesType.Line"
                XValue="x => x.date"
                YValue="x => x.measurement"
              />
            </ApexChart>
    </MudContainer>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public string Source { get; set; } = default!;
    private List<Order> orders = new List<Order>();
    private ApexChartOptions<Order> options = new();
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    public IEnumerable<ChartData>? _lastHour;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    public record ChartData(decimal? measurement, DateTimeOffset date);
    public record struct TabularData(int year, int month, decimal? monthStartTotal, decimal? monthEndTotal);
    private int _month = -1;
    private int _year = -1;
    protected override async Task OnInitializedAsync()
    {
      orders.Add(new Order(7));
      options.PlotOptions = new PlotOptions { RadialBar = new PlotOptionsRadialBar { StartAngle = -90, EndAngle = 90 } };
      if(Source.StartsWith("abb"))
        _startEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(Source);
      else
        _startEnd = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(Source);

      if(_startEnd.First != null && _startEnd.Last != null){
        _month = _startEnd.FirstDate.Month;
        _year = _startEnd.FirstDate.Year;
        _dataStruct.Add(new TabularData(_year, _month, _startEnd.First, _startEnd.Last));
      }
      if(Source.StartsWith("abb")){
        var a = await _timeseriesClient.GetAbbMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-10), DateTimeOffset.UtcNow);
        _lastHour = a.Select(x => new ChartData(x.ActivePowerL1_W, x.Timestamp));
      }
      else{
        var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-10), DateTimeOffset.UtcNow);
        _lastHour = a.Select(x => new ChartData(x.ActivePowerL1_W, x.Timestamp));
      }
    }

  private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.month.ToString() == _searchString)
      return true;

    return false;
  };

  private void RowClicked() { }

  private class Order {
    public decimal value = 10;
    public decimal valueMax = 20;
    public decimal percent = 50;

    public Order(int val){
      value = val;
      percent = (value / valueMax) * 100;
    }
  }
}

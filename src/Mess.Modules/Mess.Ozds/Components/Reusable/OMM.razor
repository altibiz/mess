@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;
@using Mess.Prelude.Extensions.Timestamps;

@inject IOzdsTimeseriesClient _timeseriesClient
@if(_dataStruct is not null ){
@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
      <MudItem xs="12" Class="pa-1">
          <OMMGraph Source="@Source" />
        </MudItem>
        <MudItem xs="12" Class="pa-1">
          <OMMGage Source="@Source" />
        </MudItem>
    </MudGrid>

      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Brojilo"].Value + ": " + Source)
      </MudText>
      @foreach(ExpandThing dataStruct in _shownOMMs.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
              <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                @T["Obračunsko razdoblje"].Value: @(dataStruct.data.month + "/" + dataStruct.data.year)
              </MudItem>
              <MudItem xs="2" Class="d-flex align-center justify-end">
                <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.year, dataStruct.data.month)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
              </MudItem>
          </MudGrid>
          <MudCollapse Class="py-1" Expanded="_shownOMMs.Where(x => x.data.year == dataStruct.data.year).Where(x => x.data.month == dataStruct.data.month).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["Prvo očitanje"].Value:
                @if(dataStruct.data.monthEndTotal is not null)
                @(DecimalString((decimal)dataStruct.data.monthEndTotal/1000, 0)) kWh
              </MudContainer>
              <MudContainer>
                @T["Zadnje očitanje"].Value:
                @if(dataStruct.data.monthStartTotal is not null)
                @(DecimalString((decimal)dataStruct.data.monthStartTotal/1000, 0)) kWh
              </MudContainer>
              <MudContainer Style="font-size: large; font-weight:bold;">
                @T["Ukupna potrošnja"].Value:
                @if(dataStruct.data.monthStartTotal is not null && dataStruct.data.monthEndTotal is not null)
                @(DecimalString((decimal)(dataStruct.data.monthStartTotal - dataStruct.data.monthEndTotal)/1000, 0)) kWh
              </MudContainer>
              <MudContainer Style="font-weight:bold;">
                @T["Maksimalna snaga"].Value:
                @(DecimalString((dataStruct.data.maxPower)/1000, 2) + " kW")
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
      }
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@(T["Brojilo"].Value + ": " + Source)</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.month"
      Title='@T["Obračunsko razdoblje"].Value'>
          <CellTemplate>
                @(context.Item.month + "/" + context.Item.year)
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.monthEndTotal"
      Title='@T["Prvo očitanje"].Value'>
          <CellTemplate>
                @if(context.Item.monthEndTotal is not null)
                @(DecimalString((decimal)context.Item.monthEndTotal/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.monthStartTotal"
      Title='@T["Zadnje očitanje"].Value'>
          <CellTemplate>
                @if(context.Item.monthStartTotal is not null)
                @(DecimalString((decimal)context.Item.monthStartTotal/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: xx-large;"
      Property="x => x.monthStartTotal - x.monthEndTotal"
      Title='@T["Ukupna potrošnja"].Value'>
          <CellTemplate>
                @if(context.Item.monthStartTotal is not null && context.Item.monthEndTotal is not null)
                @(DecimalString((decimal)(context.Item.monthStartTotal - context.Item.monthEndTotal)/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.maxPower"
      Title='@T["Maksimalna snaga"].Value'>
          <CellTemplate>
                @(DecimalString((context.Item.maxPower)/1000, 2) + " kW")
          </CellTemplate>
      </PropertyColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>

    <MudGrid Class="my-3">
        <MudItem xs="6">
          <OMMGage Source="@Source" />
        </MudItem>
        <MudItem xs="6">
          <OMMGraph Source="@Source" />
        </MudItem>
    </MudGrid>
  </MudHidden>
}
@code {

    [Parameter]
    public string Source { get; set; } = "abb";
    public string TextValue { get; set; } = "";
    private ContentItem? _iotDevice;
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    public record ChartData(decimal? L1, decimal? L2, decimal? L3, DateTimeOffset date);
    public record struct TabularData(string year, string month, decimal? monthStartTotal, decimal? monthEndTotal, decimal maxPower);
    private string _month = "-1";
    private string _year = "-1";
    private decimal thisMonthMaxPower = 0m;
    private IReadOnlyList<AbbAggregate>? _abbRange;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRange;
    private IReadOnlyList<AbbAggregate>? _abbRangeLastMonth;
    private IReadOnlyList<SchneiderAggregate>? _schneiderRangeLastMonth;
    private IReadOnlyList<SchneiderAggregate>? _schneiderMonthPowerRange;
    private IReadOnlyList<AbbAggregate>? _abbMonthPowerRange;
    private DateTimeOffset nowYear = DateTimeOffset.UtcNow.GetStartOfYear();
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
    private DateTimeOffset now = DateTime.UtcNow;
    private class ExpandThing {
      public TabularData data;
      public bool expand;
      public bool show;
    }
    List<ExpandThing> _shownOMMs = new();
    protected override async Task OnInitializedAsync()
    {

      await WithTransientSessionAsync(async session => {
        _iotDevice = await session
          .Query<ContentItem, OzdsIotDeviceIndex>()
          .Where(index => index.DeviceId == Source)
          .LatestPublished()
          .FirstOrDefaultAsync();
      });

      _abbRange = await _timeseriesClient.GetBulkAbbMonthlyAggregateAsync(new List<string>{Source},nowYear,now);
      _schneiderRange = await _timeseriesClient.GetBulkSchneiderMonthlyAggregateAsync(new List<string>{Source},nowYear,now);

      _abbMonthPowerRange = await _timeseriesClient.GetBulkAbbQuarterHourlyAggregateAsync(new List<string>{Source}, nowYear, now);
      _schneiderMonthPowerRange = await _timeseriesClient.GetBulkSchneiderQuarterHourlyAggregateAsync(new List<string>{Source}, nowYear, now);

      foreach (var month in nowYear.GetThisYearMonthStarts().Reverse()){
        _startEnd = new();
        thisMonthMaxPower = 0m;
        _month = "00";
        _year = "00";
        if(Source.StartsWith("abb")){
          if(_abbRange is not null && _abbRange.Count() > 0){
            var device = _abbRange.Where(x => x.Timestamp == month ).Where(x => x.Source == Source).FirstOrDefault();
            if (device is not null)
              _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);

            var thisMonth = _abbMonthPowerRange.Where(x => x.Timestamp.Month == month.LocalDateTime.Month ).Select(x => x.ActivePowerImportAvg_W).ToList();
            if(thisMonth.Count() > 0)
              thisMonthMaxPower = thisMonth.MaxBy(x => x);
          }
        }
        else{
          if(_schneiderRange is not null && _schneiderRange.Count() > 0){
            var device = _schneiderRange.Where(x => x.Timestamp == month ).Where(x => x.Source == Source).FirstOrDefault();
            if (device is not null)
              _startEnd = (device.ActiveEnergyImportTotalMax_Wh, device.ActiveEnergyImportTotalMin_Wh, device.Timestamp);

            var thisMonth = _schneiderMonthPowerRange.Where(x => x.Timestamp.Month == month.LocalDateTime.Month ).Select(x => x.ActivePowerImportAvg_W).ToList();
            if(thisMonth.Count() > 0)
              thisMonthMaxPower = thisMonth.MaxBy(x => x);
          }
        }
        if(_startEnd.First is not null && _startEnd.Last is not null){
          _month = month.LocalDateTime.ToString("MM");
          _year = nowYear.LocalDateTime.ToString("yy");
          _dataStruct.Add(new TabularData(_year, _month, _startEnd.First, _startEnd.Last, thisMonthMaxPower));
          _shownOMMs.Add(new ExpandThing{data = new (_year, _month, _startEnd.First, _startEnd.Last, thisMonthMaxPower), show = true, expand = false});
        }
      }
    }
  private void OnExpandCollapseClick(string year, string month) {
      var a = _shownOMMs.Where(x => x.data.year == year).Where(x => x.data.month == month).FirstOrDefault();
      if(a is not null)
        a.expand = !a.expand;
  }
}

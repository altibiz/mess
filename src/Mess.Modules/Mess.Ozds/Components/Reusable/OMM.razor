@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;

@inject IOzdsTimeseriesClient _timeseriesClient

<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter"
  RowClick="@RowClicked">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@Source</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      Property="x => x.year"
      Title='@T["Godina"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.month"
      Title='@T["Mjesec"].Value' />
    <PropertyColumn
      Property="x => x.monthEndTotal"
      Title='@T["Poćetna potrošnja"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.monthStartTotal"
      Title='@T["Zadnja potrošnja"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.monthStartTotal - x.monthEndTotal"
      Title='@T["Ukupna potrošnja"].Value'
      Filterable="false" />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>




@if(_lastDay != null){
  <MudGrid Class="my-3">
      <MudItem xs="6">
          <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8" Height="500px">
      <MudContainer MaxWidth="MaxWidth.Small">
              <ApexChart TItem="Order"
                        Title="@Source"
                        Options="options"
                        >
                  <ApexPointSeries TItem="Order"
                                  Items="orders"
                                  SeriesType=SeriesType.RadialBar
                                  Name="@T["Potrošnja"].Value"
                                  XValue="@(e => e.value)"
                                  YAggregate="@(e => e.First().percent)"
                                  OrderByDescending="e=>e.X" />
              </ApexChart>
      </MudContainer>
          </MudPaper>
      </MudItem>
      <MudItem xs="6">
          <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8" Height="500px">
      <MudContainer MaxWidth="MaxWidth.Small">
              <ApexChart TItem="ChartData"
                XAxisType="XAxisType.Datetime"
                Options="graphOptions"
                @ref="chart"
              Title="@Source">
                <ApexPointSeries TItem="ChartData"
                  Items="@_graphValues"
                  Name="@T["L1 Potrošnja"].Value"
                  SeriesType="SeriesType.Line"
                  XValue='x => x.date'
                  YValue="x => x.L1"
                />
                <ApexPointSeries TItem="ChartData"
                  Items="@_graphValues"
                  Name="@T["L2 Potrošnja"].Value"
                  SeriesType="SeriesType.Line"
                  XValue='x => x.date'
                  YValue="x => x.L2"
                />
                <ApexPointSeries TItem="ChartData"
                  Items="@_graphValues"
                  Name="@T["L3 Potrošnja"].Value"
                  SeriesType="SeriesType.Line"
                  XValue='x => x.date'
                  YValue="x => x.L3"
                />
              </ApexChart>
      <MudMenu Label="@T["Odabir vremena"].Value" Dense="true">
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale1"))">5 min</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale2"))">10 min</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale3"))">15 min</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale4"))">30 min</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale5"))">1 h</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale6"))">3 h</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale7"))">6 h</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale8"))">12 h</MudMenuItem>
        <MudMenuItem OnClick="@(() => MenuItemClicked("Scale9"))">24 h</MudMenuItem>
      </MudMenu>
      </MudContainer>
          </MudPaper>
      </MudItem>
  </MudGrid>
}

@code {

    [Parameter]
    public string Source { get; set; } = "abb";
    private List<Order> orders = new List<Order>();
    private ApexChartOptions<Order> options = new();
    private ApexChartOptions<ChartData> graphOptions = new();
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    public IEnumerable<ChartData>? _lastDay;
    public IEnumerable<ChartData>? _graphValues;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    public record ChartData(decimal? L1, decimal? L2, decimal? L3, DateTimeOffset date);
    public record struct TabularData(int year, int month, decimal? monthStartTotal, decimal? monthEndTotal);
    private int _month = -1;
    private int _year = -1;
    private ApexChart<ChartData> chart = default!;
    private Timer? timer;
    private bool timerInitialized;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !timerInitialized)
        {
            timerInitialized = true;
            timer = new Timer(
              new TimerCallback(async _ => await GetValues()),
              null,
              0,
              10000
            );
        }
    }
    protected override async Task OnInitializedAsync()
    {
      graphOptions= new ApexChartOptions<ChartData>() {
        Grid = new Grid
        {
            BorderColor = "#e7e7e7",
            Row = new GridRow
            {
                Colors = new List<string> { "#f3f3f3", "transparent" },
                Opacity = 0.5d
            }
        }
        };
      options.PlotOptions = new PlotOptions { RadialBar = new PlotOptionsRadialBar { StartAngle = -90, EndAngle = 90 } };
      if(Source.StartsWith("abb"))
        _startEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(Source);
      else
        _startEnd = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(Source);

      if(_startEnd.First != null && _startEnd.Last != null){
        _month = _startEnd.FirstDate.Month;
        _year = _startEnd.FirstDate.Year;
        _dataStruct.Add(new TabularData(_year, _month, _startEnd.First, _startEnd.Last));
      }
      if(Source.StartsWith("abb")){
        var a = await _timeseriesClient.GetAbbMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-24), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
      else{
        var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-24), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
      _graphValues = _lastDay.TakeLast(20);
      orders.Add(new Order(_startEnd.First));
    }

  private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.month.ToString() == _searchString)
      return true;

    return false;
  };

  private async Task MenuItemClicked(string item)
  {
    switch(item)
    {
      case "Scale1":
          _graphValues = _lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-5));
          break;
      case "Scale2":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-10));;
          break;
      case "Scale3":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-15));;
          break;
      case "Scale4":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-30));;
          break;
      case "Scale5":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-60));;
          break;
      case "Scale6":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-3));;
          break;
      case "Scale7":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-6));;
          break;
      case "Scale8":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-12));;
          break;
      case "Scale9":
          _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-24));;
          break;
    }
    await chart.UpdateSeriesAsync(true);
  }

  private async Task GetValues(){
    if(Source.StartsWith("abb")){
        var a = await _timeseriesClient.GetAbbMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-24), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
      else{
        var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-24), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
    _graphValues = _lastDay.TakeLast(20);
    await chart.UpdateSeriesAsync(true);
  }

  private void RowClicked() { }

  private class Order {
    public decimal? value = 10;
    public decimal? valueMax = 1000;
    public decimal? percent = 50;

    public Order(decimal? val){
      value = val;
      percent = (value / valueMax) * 100;
    }
  }
}

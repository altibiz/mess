@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject IOzdsTimeseriesClient _timeseriesClient

<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter"
  RowClick="@RowClicked">
  <ToolBarContent>
    <MudText Typo="Typo.h6">@T["OMM"]</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="Search"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      Property="x => x.year"
      Title='@T["Year"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.month"
      Title='@T["Month"].Value' />
    <PropertyColumn
      Property="x => x.monthEndTotal.ActiveEnergyNetTotal_kWh"
      Title='@T["Start Total"].Value'
      Filterable="false" />
    <PropertyColumn
      Property="x => x.monthStartTotal.ActiveEnergyNetTotal_kWh"
      Title='@T["End Total"].Value'
      Filterable="false" />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>





<MudGrid Class="my-3">
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8" Height="500px">
    <MudContainer MaxWidth="MaxWidth.Small">
            <ApexChart TItem="Order"
            Title="Order Gross Value"
            Options="options">
              <ApexPointSeries TItem="Order"
                Items="orders"
                Name="Gross Value"
                SeriesType="SeriesType.Donut"
                XValue="@(e => e.lable)"
                YValue="@(e => e.value)"
                OrderBy="@(e => e.X)"
              />
            </ApexChart>
    </MudContainer>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8" Height="500px">
    <MudContainer MaxWidth="MaxWidth.Small">
            <ApexChart TItem="AbbMeasurement"
            Title="OMM last hour">
              <ApexPointSeries TItem="AbbMeasurement"
                Items="@_lastHour"
                Name="Net Profit"
                SeriesType="SeriesType.Line"
                XValue="x => x.Timestamp.Ticks"
                YValue="x => x.ActiveEnergyNetTotal_kWh"
              />
            </ApexChart>
    </MudContainer>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    [Parameter]
    public string Source { get; set; } = default!;
    private List<Order> orders = new List<Order>();
    private ApexChartOptions<Order> options = new();
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    public IReadOnlyList<AbbMeasurement>? _lastHour;
    public record struct TabularData(int year, int month, AbbMeasurement monthStartTotal, AbbMeasurement monthEndTotal);
    private int _month = -1;
    private int _year = -1;
    protected override async Task OnInitializedAsync()
    {
      orders.Add(new Order(7));
      int _endAngle = (int)(-89 + 179 * (orders[0].value / orders[0].valueMax));
      options.PlotOptions = new PlotOptions { Pie = new PlotOptionsPie { StartAngle = -90, EndAngle = _endAngle} };
      var startEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(Source);
      if(startEnd.First != null && startEnd.Last != null){
        _month = startEnd.First.Timestamp.Month;
        _year = startEnd.First.Timestamp.Year;
        _dataStruct.Add(new TabularData(_year, _month, startEnd.First, startEnd.Last));
      }
      _lastHour = await _timeseriesClient.GetAbbMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-10), DateTimeOffset.UtcNow);
    }

  private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.month.ToString() == _searchString)
      return true;

    return false;
  };

  private void RowClicked() { }

  private class Order {
    public string lable = "Max power";
    public decimal value = 10;
    public decimal valueMin = 20;
    public decimal valueMax = 20;

    public Order(int val){
      value = val;
      valueMin = valueMin - val;
    }
  }
}

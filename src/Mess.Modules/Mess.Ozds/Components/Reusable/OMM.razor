@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes
@using System.Threading;

@inject IOzdsTimeseriesClient _timeseriesClient

@if(_lastDay != null){
@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
      <MudItem xs="12" Class="pa-1">
          <OMMGraph Source="@Source" />
        </MudItem>
        <MudItem xs="12" Class="pa-1">
            <MudPaper Class="d-flex align-center justify-start mud-width-full pa-1 flex-column">
              <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
                @(T["Trenutna snaga"].Value + ": " + Source)
              </MudItem>
        <MudContainer MaxWidth="MaxWidth.Small">
                <ApexChart TItem="Order"
                          Options="options"
                          >
                    <ApexPointSeries TItem="Order"
                                    Items="orders"
                                    SeriesType=SeriesType.RadialBar
                                    Name="@T["Potrošnja"].Value"
                                    XValue="@(e => DecimalString((decimal)e.value, 0) + " kW")"
                                    YAggregate="@(e => e.First().percent)"
                                    OrderByDescending="e=>e.X" />
                </ApexChart>
        </MudContainer>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudPaper Class="pa-1">
      <MudText Typo="Typo.h4" Class="d-flex justify-center">
        @(T["Brojilo"].Value + ": " + Source)
      </MudText>
      <MudDivider />
      @foreach(ExpandThing dataStruct in _shownOMMs.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="5" Class="d-flex align-center justify-start" Style="font-weight: bold;">
              @T["Godina"].Value: @dataStruct.data.year
            </MudItem>
            <MudItem xs="5" Class="d-flex align-center justify-start" Style="font-weight: bold;">
              @T["Mjesec"].Value: @dataStruct.data.month
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.year, dataStruct.data.month)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
            </MudItem>
          </MudGrid>
          <MudCollapse Class="py-1" Expanded="_shownOMMs.Where(x => x.data.year == dataStruct.data.year).Where(x => x.data.month == dataStruct.data.month).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                  @T["Prvo očitanje"].Value:
                  @if(dataStruct.data.monthEndTotal is not null)
                  @(DecimalString((decimal)dataStruct.data.monthEndTotal, 0)) kWh
              </MudContainer>
              <MudContainer>
                @T["Zadnje očitanje"].Value:
                @if(dataStruct.data.monthStartTotal is not null)
                @(DecimalString((decimal)dataStruct.data.monthStartTotal, 0)) kWh
              </MudContainer>
              <MudContainer Style="font-size: large; font-weight:bold;">
                @T["Ukupna potrošnja"].Value:
                @if(dataStruct.data.monthStartTotal is not null && dataStruct.data.monthEndTotal is not null)
                @(DecimalString((decimal)(dataStruct.data.monthStartTotal - dataStruct.data.monthEndTotal), 0)) kWh
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
      }
    </MudPaper>
  </MudHidden>



@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@(T["Brojilo"].Value + ": " + Source)</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
    <PropertyColumn
      CellStyle="font-size: large;"
      Property="x => x.year"
      Title='@T["Godina"].Value'/>
    <PropertyColumn
      Property="x => x.month"
      Title='@T["Mjesec"].Value' />
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.monthEndTotal"
      Title='@T["Prvo očitanje"].Value'>
          <CellTemplate>
                @if(context.Item.monthEndTotal is not null)
                @(DecimalString((decimal)context.Item.monthEndTotal, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.monthStartTotal"
      Title='@T["Zadnje očitanje"].Value'>
          <CellTemplate>
                @if(context.Item.monthStartTotal is not null)
                @(DecimalString((decimal)context.Item.monthStartTotal, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
    <PropertyColumn
      CellStyle="font-size: xx-large;"
      Property="x => x.monthStartTotal - x.monthEndTotal"
      Title='@T["Ukupna potrošnja"].Value'>
          <CellTemplate>
                @if(context.Item.monthStartTotal is not null && context.Item.monthEndTotal is not null)
                @(DecimalString((decimal)(context.Item.monthStartTotal - context.Item.monthEndTotal), 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>

    <MudGrid Class="my-3">
        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-start mud-width-full py-8 px-8 flex-column" Height="450px">
              <MudItem Class="d-flex" Style="font-size: large; font-weight: bold;">
                @(T["Trenutna snaga"].Value + ": " + Source)
              </MudItem>
        <MudContainer MaxWidth="MaxWidth.Small">
                <ApexChart TItem="Order"
                          Options="options"
                          >
                    <ApexPointSeries TItem="Order"
                                    Items="orders"
                                    SeriesType=SeriesType.RadialBar
                                    Name="@T["Potrošnja"].Value"
                                    XValue="@(e => DecimalString((decimal)e.value, 0) + " kW")"
                                    YAggregate="@(e =>  Math.Round(e.First().percent ?? 0M, 2))"
                                    OrderByDescending="e=>e.X" />
                </ApexChart>
        </MudContainer>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
          <OMMGraph Source="@Source" />
        </MudItem>
    </MudGrid>
  </MudHidden>
}

@code {

    [Parameter]
    public string Source { get; set; } = "abb";
    public string TextValue { get; set; } = "";
    private List<Order> orders = new List<Order>();
    private ApexChartOptions<Order> options = new();
    private ApexChartOptions<ChartData> graphOptions = new();
    private ApexChartOptions<ChartData> graphOptionsMobile = new();
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    public IEnumerable<ChartData>? _lastDay;
    public IEnumerable<ChartData>? _graphValues;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEndLastMonth;
    public record ChartData(decimal? L1, decimal? L2, decimal? L3, DateTimeOffset date);
    public record struct TabularData(int year, int month, decimal? monthStartTotal, decimal? monthEndTotal);
    private int _month = -1;
    private int _year = -1;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private ApexChart<ChartData> chart = default!;
    private Timer? timer;
    private bool timerInitialized;
  private class Order {
    public decimal? value = 10;
    public decimal? valueMax = 100000;
    public decimal? percent = 50;

    public Order(decimal? val, decimal? max){
      value = val;
      valueMax = max * 0.8m;
      if(valueMax <= 0){
        valueMax = 100000;
      }
      percent = (value / valueMax) * 100;
    }
  }
    private class ExpandThing {
      public TabularData data;
      public bool expand;
      public bool show;
    }
    List<ExpandThing> _shownOMMs = new();
    protected override void OnAfterRender(bool firstRender)
    {
        // if (firstRender && !timerInitialized)
        // {
        //     timerInitialized = true;
        //     timer = new Timer(
        //       new TimerCallback(async _ => await GetValues()),
        //       null,
        //       0,
        //       10000
        //     );
        // }
    }
    protected override async Task OnInitializedAsync()
    {
      graphOptions= new ApexChartOptions<ChartData>() {
        Grid = new Grid
        {
            BorderColor = "#e7e7e7",
            Row = new GridRow
            {
                Colors = new List<string> { "#f3f3f3", "transparent" },
                Opacity = 0.5d
            }
        }
        };
      graphOptionsMobile= new () {
      Grid = new Grid
      {
          BorderColor = "#e7e7e7",
          Row = new GridRow
          {
              Colors = new List<string> { "#f3f3f3", "transparent" },
              Opacity = 0.5d
          }
      }
      };
      graphOptions.Tooltip = new ApexCharts.Tooltip { X = new TooltipX { Format = @"hh : mm : ss" } };
      graphOptionsMobile.Tooltip = new () { X = new TooltipX { Format = @"hh : mm : ss" } };
      graphOptionsMobile.Yaxis = new List<YAxis>();
      graphOptionsMobile.Xaxis = new XAxis();

      graphOptionsMobile.Yaxis.Add(new YAxis
            {
                Show = false
            });
      graphOptionsMobile.Xaxis = new XAxis()
            {
              Labels = new XAxisLabels(){ Show = false }
            };
      graphOptionsMobile.Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false}
                }
            };
      graphOptions.Chart = new Chart
            {
                Toolbar = new ApexCharts.Toolbar
                {
                    Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
                }
            };
      options.PlotOptions = new PlotOptions { RadialBar = new PlotOptionsRadialBar { StartAngle = -90, EndAngle = 90 } };

      options.DataLabels = new DataLabels() {
        Enabled = true,
        Formatter = @"function(value, opts) {
            return  Math.round(Number(value)) + '%';}"
      };
      options.Xaxis = new XAxis
            {
              Labels = new XAxisLabels{
                Show = false
              }
            };
      options.Yaxis = new();
      options.Yaxis.Add( new YAxis
            {
              Show = true,
              Labels = new YAxisLabels{
                Show = false
              },
              DecimalsInFloat = 2,
              Title = new ApexCharts.AxisTitle () {
                Text = "aa"
              }
            });
      options.Tooltip = new ApexCharts.Tooltip
          {
            Enabled = false,
          };

      _startEnd = new();
      _startEndLastMonth = new();
       if(Source.StartsWith("abb")){
        _startEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(Source, nowMonth, DateTime.UtcNow);
        _startEndLastMonth = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(Source, nowMonth.AddMonths(-1), nowMonth);
       }
       else{
         _startEnd = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(Source, nowMonth, DateTime.UtcNow);
        _startEndLastMonth = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(Source, nowMonth.AddMonths(-1), nowMonth);
       }

      if(_startEnd.First != null && _startEnd.Last != null){
        _month = _startEnd.FirstDate.Month;
        _year = _startEnd.FirstDate.Year;
        _dataStruct.Add(new TabularData(_year, _month, _startEnd.First/ 1000, _startEnd.Last/ 1000));
        _shownOMMs.Add(new ExpandThing{data = new (_year, _month, _startEnd.First/ 1000, _startEnd.Last/ 1000), show = true, expand = false});
      }
      if(Source.StartsWith("abb")){
        var a = await _timeseriesClient.GetAbbMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-24), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
      else{
        var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddHours(-24), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
      _graphValues = _lastDay.TakeLast(20);
      orders.Add(new Order(285, 423)); //TODO: Change to compate max power of last month to current power
    }

  private async Task MenuItemClicked(string item)
  {
    if(_lastDay is not null){
      switch(item)
      {
        case "Scale1":
            _graphValues = _lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-5));
            break;
        case "Scale2":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-10));
            break;
        case "Scale3":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-15));
            break;
        case "Scale4":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddMinutes(-30));
            break;
        case "Scale5":
            _graphValues = _lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-1));
            break;
        case "Scale6":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-3));
            break;
        case "Scale7":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-6));
            break;
        case "Scale8":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-12));
            break;
        case "Scale9":
            _graphValues =_lastDay.Where(x => x.date > DateTime.UtcNow.AddHours(-24));
            break;
      }
    }
    await chart.UpdateSeriesAsync(true);
  }

  private async Task GetValues(){
    if(Source.StartsWith("abb")){
        var a = await _timeseriesClient.GetAbbMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddMinutes(-1), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
      else{
        var a = await _timeseriesClient.GetSchneiderMeasurementsAsync(Source, DateTimeOffset.UtcNow.AddMinutes(-1), DateTimeOffset.UtcNow);
        _lastDay = a.Select(x => new ChartData(x.ActivePowerL1_W, x.ActivePowerL2_W, x.ActivePowerL3_W, x.Timestamp)).ToList();
      }
    _graphValues = _lastDay.TakeLast(20);
    await chart.UpdateSeriesAsync(true);
  }
  private void OnExpandCollapseClick(int year, int month) {
      var a = _shownOMMs.Where(x => x.data.year == year).Where(x => x.data.month == month).FirstOrDefault();
      if(a is not null)
        a.expand = !a.expand;
  }
}

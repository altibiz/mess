@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject NavigationManager NavigationManager

<MudDataGrid
  T="TabularData"
  MultiSelection="true"
  Items="@_dataStruct"
  SortMode="SortMode.Multiple"
  Filterable="true"
  QuickFilter="@_quickFilter">
  <ToolBarContent>
    <MudText Typo="Typo.h4">@T["Mjerna mjesta"].Value</MudText>
    <MudSpacer />
    <MudTextField
      @bind-Value="_searchString"
      Placeholder="@T["Pretraži"].Value"
      Adornment="Adornment.Start"
      Immediate="true"
      AdornmentIcon="@Icons.Material.Filled.Search"
      IconSize="MudBlazor.Size.Medium"
      Class="mt-0">
    </MudTextField>
  </ToolBarContent>
  <Columns>
   <TemplateColumn Title="@T["Mjerna mjesta"].Value"
      Sortable="false"
      Filterable="false">
        <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectOMM(context.Item.omm)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                @context.Item.omm.DisplayText
              </MudButton>
            </MudStack>
        </CellTemplate>
    </TemplateColumn>
    <TemplateColumn Title="@T["Podmreže"].Value"
      Sortable="false"
      Filterable="false">
        <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectSubnet(context.Item.system)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                @context.Item.system.DisplayText
              </MudButton>
            </MudStack>
        </CellTemplate>
    </TemplateColumn>
    <TemplateColumn Title="@T["Zakupnici"].Value"
      Sortable="false"
      Filterable="false">
        <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectTenant(context.Item.unit)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                @context.Item.unit.DisplayText
              </MudButton>
            </MudStack>
        </CellTemplate>
    </TemplateColumn>
    <PropertyColumn
      CellStyle="font-size: x-large;"
      Property="x => x.lastMeasurement"
      Title='@T["Ukupna potrošnja"].Value' />
  </Columns>
  <PagerContent>
    <MudDataGridPager T="TabularData" />
  </PagerContent>
</MudDataGrid>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private string? _searchString;
    private List<TabularData> _dataStruct = new List<TabularData>();
    private IEnumerable<ContentItem>? _systems;
    private IEnumerable<ContentItem>? _units;
    private IReadOnlyList<AbbMeasurement>? _lastAbbMeasurements;
    private IReadOnlyList<SchneiderMeasurement>? _lastSchneiderMeasurements;
    private IEnumerable<ContentItem>? _ioTDevices;
    private List<(string, decimal?)> _lastTotalPerOMM = new List<(string, decimal?)>();
    public record struct TabularData(ContentItem omm, ContentItem system, ContentItem unit, decimal? lastMeasurement);
    protected override async Task OnInitializedAsync()
    {
      await WithTransientSessionAsync(async session => {
        if(LegalEntity.ContentType == "ClosedDistributionSystem"){
          _ioTDevices = await session
            .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
            .Where(index => !index.IsMessenger)
            .ListAsync();
          _systems = await session
            .Query<ContentItem, ClosedDistributionSystemIndex>()
            .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
            .ListAsync();
          _units = await session
            .Query<ContentItem, DistributionSystemUnitIndex>()
            .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
            .ListAsync();
        }
        else{
          _ioTDevices = await session
            .Query<ContentItem, OzdsIotDeviceIndex>()
            .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
            .Where(index => !index.IsMessenger)
            .ListAsync();
          _systems = await session
            .Query<ContentItem, ClosedDistributionSystemIndex>()
            .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
            .ListAsync();
          _units = await session
            .Query<ContentItem, DistributionSystemUnitIndex>()
            .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
            .ListAsync();
        }
      });
      if(_systems is not null && _units is not null && _ioTDevices is not null)
        foreach(var system in _systems){
          foreach(var unit in _units){
            foreach(var omm in _ioTDevices){
              _dataStruct.Add(new TabularData(omm, system, unit, omm.As<OzdsIotDevicePart>().LatestImport));
            }
          }
        }
    }
    private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.unit.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };
  private void InspectTenant(ContentItem item) {
      NavigationManager.NavigateTo($"app/tenant/{item.ContentItemId}");
  }
  private void InspectSubnet(ContentItem item) {
      NavigationManager.NavigateTo($"app/subnet/{item.ContentItemId}");
  }
  private void InspectOMM(ContentItem item) {
      NavigationManager.NavigateTo($"app/omm/{item.DisplayText}");
  }
}

@using Mess.Ozds.Abstractions.Indexes
@using Mess.Iot.Abstractions.Models
@using Mess.Ozds.Abstractions.Models
@using OrchardCore.Users.Models
@using OrchardCore.ContentFields.Indexing.SQL
@using System.Linq.Expressions
@using Mess.Ozds.Abstractions.Timeseries
@using Mess.Billing.Abstractions.Models
@using OrchardCore.ContentManagement.Records
@using OrchardCore.Users.Indexes

@inject NavigationManager NavigationManager
@inject IOzdsTimeseriesClient _timeseriesClient


@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudPaper Class="pa-1">
      <MudText Typo="Typo.h4" Class="d-flex justify-center">
        @(T["Mjerna mjesta"].Value)
      </MudText>
      <MudTextField Class="pa-3" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži submreže" Variant="Variant.Text"></MudTextField>
      @foreach(ExpandThing dataStruct in _shownOMMs.Where(x => x.show == true).ToList()){
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Mjerna mjesta"].Value: <br> @dataStruct.data.omm.DisplayText
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => InspectOMM(dataStruct.data.omm)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja zadnjih 30 dana"].Value: <br>
              @if(dataStruct.data.lastMonthUsage is not null)
              @DecimalString((decimal)dataStruct.data.lastMonthUsage/1000, 0) kWh
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                @if(dataStruct.data.thisMonthUsage is not null)
              @T["Zadnji obracun"].Value: <br>
              @if(dataStruct.data.thisMonthUsage is not null)
              @DecimalString((decimal)dataStruct.data.thisMonthUsage/1000, 0) kWh
            </MudItem>
              <MudItem xs="2" Class="d-flex align-center justify-end">
                <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.omm.ContentItemId)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="MudBlazor.Color.Default"/>
              </MudItem>
          </MudGrid>

          <MudCollapse Class="py-2" Expanded="_shownOMMs.Where(x => x.data.omm.DisplayText == dataStruct.data.omm.DisplayText).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["Lokacije"].Value: @(dataStruct.data.system.DisplayText)
              </MudContainer>
              <MudContainer>
                @T["Korisnk lokacije"].Value: @(dataStruct.data.unit.DisplayText)
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
      }
    </MudPaper>
  </MudHidden>


@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudDataGrid
      T="TabularData"
      MultiSelection="true"
      Items="@_dataStruct"
      SortMode="SortMode.Multiple"
      Filterable="true"
      QuickFilter="@_quickFilter">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@T["Mjerna mjesta"].Value</MudText>
        <MudSpacer />
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="@T["Pretraži"].Value"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="MudBlazor.Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns>
      <TemplateColumn Title="@T["Mjerna mjesta"].Value" Sortable="false"

           >
            <CellTemplate>
                <MudStack Row>
                  <MudButton OnClick="() => InspectOMM(context.Item.omm)" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                    @context.Item.omm.DisplayText
                  </MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="@T["Lokacije"].Value" Sortable="false"

           >
            <CellTemplate>
                <MudStack Row>
                  <MudButton OnClick="() => InspectSubnet(context.Item.system)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                    @context.Item.system.DisplayText
                  </MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="@T["Korisnici mreže"].Value" Sortable="false"
           >
            <CellTemplate>
                <MudStack Row>
                  <MudButton OnClick="() => InspectTenant(context.Item.unit)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                    @context.Item.unit.DisplayText
                  </MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.lastMonthUsage"
          Title='@T["Potrošnja prošli mjesec"].Value' >
            <CellTemplate>
              @if(context.Item.lastMonthUsage is not null)
              @(DecimalString((decimal)context.Item.lastMonthUsage/1000, 0) + " kWh")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.thisMonthUsage"
          Title='@T["Potrošnja trenutni mjesec"].Value' >
          <CellTemplate>
              @if(context.Item.thisMonthUsage is not null)
              @(DecimalString((decimal)context.Item.thisMonthUsage/1000, 0) + " kWh")
          </CellTemplate>
      </PropertyColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="TabularData" />
      </PagerContent>
    </MudDataGrid>
  </MudHidden>

@code {
    [Parameter]
    public ContentItem LegalEntity { get; set; } = default!;
    private string? _searchString;
    private DateTimeOffset nowMonth = DateTimeOffset.UtcNow.AddDays(-DateTimeOffset.UtcNow.Day);
    private List<TabularData> _dataStruct = new List<TabularData>();
    private IEnumerable<ContentItem>? _systems;
    private IEnumerable<ContentItem>? _units;
    private IReadOnlyList<AbbMeasurement>? _lastAbbMeasurements;
    private IReadOnlyList<SchneiderMeasurement>? _lastSchneiderMeasurements;
    private IEnumerable<ContentItem>? _ioTDevices;
    @* private List<(decimal total, string source)> _totalPerOMM = new(); *@
    private List<(string, decimal?)> _lastTotalPerOMM = new List<(string, decimal?)>();
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
    private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _thisMonthStartEnd;
    public record struct TabularData(ContentItem omm, ContentItem system, ContentItem unit, decimal? lastMonthUsage, decimal? thisMonthUsage);
    protected override async Task OnInitializedAsync()
    {
        await WithTransientSessionAsync(async session => {
            if(LegalEntity.ContentType == "ClosedDistributionSystem"){
                _ioTDevices = await session
                  .Query<ContentItem, OzdsIotDeviceIndex>()
                  .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
                  .Where(index => !index.IsMessenger)
                  .ListAsync();
                _systems = await session
                  .Query<ContentItem, ClosedDistributionSystemIndex>()
                  .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
                  .ListAsync();
                _units = await session
                  .Query<ContentItem, DistributionSystemUnitIndex>()
                  .Where(index => index.ClosedDistributionSystemContentItemId == LegalEntity.ContentItemId)
                  .ListAsync();
                  if(_ioTDevices != null && _ioTDevices.Count() > 0){
                    var a =  await session
                      .Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
                      .Where(index => index.RecipientContentItemId == _units.First().ContentItemId) // TODO: fix this, this is real bad
                      .ListAsync();
                    foreach(var omm in _ioTDevices){
                      List<List<OzdsCalculationData>> b = a.Select(x => x.As<OzdsCalculationPart>().Calculations).ToList();
                      @* foreach(var calc in b){
                        foreach(var cal in calc){
                          _totalPerOMM.Add((cal.Total, cal.IotDevice.DisplayText));
                        }
                      } *@
                    }
                  }
            }
            else{
                _ioTDevices = await session
                  .Query<ContentItem, OzdsIotDeviceIndex>()
                  .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
                  .Where(index => !index.IsMessenger)
                  .ListAsync();
                _systems = await session
                  .Query<ContentItem, ClosedDistributionSystemIndex>()
                  .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
                  .ListAsync();
                _units = await session
                  .Query<ContentItem, DistributionSystemUnitIndex>()
                  .Where(index => index.DistributionSystemOperatorContentItemId == LegalEntity.ContentItemId)
                  .ListAsync();
                if(_ioTDevices != null && _ioTDevices.Count() > 0){
                  var a =  await session
                    .Query<ContentItem, Mess.Billing.Abstractions.Indexes.PaymentIndex>()
                    .Where(index => index.IssuerContentItemId == LegalEntity.ContentItemId)
                    .ListAsync();
                  foreach(var omm in _ioTDevices){
                    List<List<OzdsCalculationData>> b = a.Select(x => x.As<OzdsCalculationPart>().Calculations).ToList();
                    @* foreach(var calc in b){
                      foreach(var cal in calc){
                        _totalPerOMM.Add((cal.Total, cal.IotDevice.DisplayText));
                      }
                    } *@
                  }
                }
        }
      });
      if(_systems is not null && _units is not null && _ioTDevices is not null)
        foreach(var system in _systems){
          foreach(var unit in _units){
            foreach(var omm in _ioTDevices){
              _startEnd = new();
              _thisMonthStartEnd = new();
                if(omm.As<IotDevicePart>().DeviceId.Text.StartsWith("abb")){
                  _thisMonthStartEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(omm.As<IotDevicePart>().DeviceId.Text, nowMonth, DateTime.UtcNow);
                  _startEnd = await _timeseriesClient.GetAbbLastMonthMeasurementsAsync(omm.As<IotDevicePart>().DeviceId.Text, nowMonth.AddMonths(-1), nowMonth);
                  }
                else{
                  _thisMonthStartEnd = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(omm.As<IotDevicePart>().DeviceId.Text, nowMonth, DateTime.UtcNow);
                  _startEnd = await _timeseriesClient.GetSchneiderLastMonthMeasurementsAsync(omm.As<IotDevicePart>().DeviceId.Text, nowMonth.AddMonths(-1), nowMonth);
                }
              _dataStruct.Add(new TabularData(omm, system, unit, _startEnd.First - _startEnd.Last, _thisMonthStartEnd.First - _thisMonthStartEnd.Last));
            }
          }
        }
        foreach(var data in _dataStruct){
          _shownOMMs.Add( new ExpandThing{data = data, show = true, expand = false});
        }
    }
    private Func<TabularData, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.unit.DisplayText.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };
  private void InspectTenant(ContentItem item) {
      NavigationManager.NavigateTo($"app/tenant/{item.ContentItemId}");
  }
  private void InspectSubnet(ContentItem item) {
      NavigationManager.NavigateTo($"app/subnet/{item.ContentItemId}");
  }
  private void InspectOMM(ContentItem item) {
      NavigationManager.NavigateTo($"app/omm/{item.DisplayText}");
  }

@* MOBILE *@
  public string TextValue { get; set; } = "";
  private class ExpandThing {
    public TabularData data;
    public bool expand;
    public bool show;
  }
  List<ExpandThing> _shownOMMs = new();
  private void OnExpandCollapseClick(string id) {
    var a = _shownOMMs.Where(x => x.data.omm.ContentItemId == id).FirstOrDefault();
    a.expand = !a.expand;
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownOMMs)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownOMMs.Where(x => x.data.system.DisplayText.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}

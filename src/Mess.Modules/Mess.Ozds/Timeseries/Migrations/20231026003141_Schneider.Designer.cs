// <auto-generated />
using System;
using Mess.Ozds.Timeseries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mess.Ozds.Timeseries.Migrations
{
    [DbContext(typeof(OzdsTimeseriesDbContext))]
    [Migration("20231026003141_Schneider")]
    partial class Schneider
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mess.Ozds.Timeseries.AbbMeasurementEntity", b =>
                {
                    b.Property<string>("Tenant")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.Property<long?>("ActiveEnergyExportTariff1_kWh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyExportTariff2_kWh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyExportTotal_kWh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyImportTariff1_kWh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyImportTariff2_kWh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyImportTotal_kWh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyNetTotal_kWh")
                        .HasColumnType("int8");

                    b.Property<int?>("ActivePowerL1_W")
                        .HasColumnType("int4");

                    b.Property<int?>("ActivePowerL2_W")
                        .HasColumnType("int4");

                    b.Property<int?>("ActivePowerL3_W")
                        .HasColumnType("int4");

                    b.Property<int?>("ActivePowerTotal_W")
                        .HasColumnType("int4");

                    b.Property<int?>("ApparentPowerL1_VA")
                        .HasColumnType("int4");

                    b.Property<int?>("ApparentPowerL2_VA")
                        .HasColumnType("int4");

                    b.Property<int?>("ApparentPowerL3_VA")
                        .HasColumnType("int4");

                    b.Property<int?>("ApparentPowerTotal_VA")
                        .HasColumnType("int4");

                    b.Property<int?>("CurrentL1_A")
                        .HasColumnType("int4");

                    b.Property<int?>("CurrentL2_A")
                        .HasColumnType("int4");

                    b.Property<int?>("CurrentL3_A")
                        .HasColumnType("int4");

                    b.Property<long>("Milliseconds")
                        .HasColumnType("bigint");

                    b.Property<short?>("PowerFactorL1")
                        .HasColumnType("int2");

                    b.Property<short?>("PowerFactorL2")
                        .HasColumnType("int2");

                    b.Property<short?>("PowerFactorL3")
                        .HasColumnType("int2");

                    b.Property<short?>("PowerFactorTotal")
                        .HasColumnType("int2");

                    b.Property<int?>("ReactivePowerL1_VAR")
                        .HasColumnType("int4");

                    b.Property<int?>("ReactivePowerL2_VAR")
                        .HasColumnType("int4");

                    b.Property<int?>("ReactivePowerL3_VAR")
                        .HasColumnType("int4");

                    b.Property<int?>("ReactivePowerTotal_VAR")
                        .HasColumnType("int4");

                    b.Property<int?>("VoltageL1_V")
                        .HasColumnType("int4");

                    b.Property<int?>("VoltageL2_V")
                        .HasColumnType("int4");

                    b.Property<int?>("VoltageL3_V")
                        .HasColumnType("int4");

                    b.HasKey("Tenant", "Source", "Timestamp");

                    b.HasIndex("Tenant", "Source", "Milliseconds");

                    b.HasIndex("Tenant", "Source", "Timestamp");

                    b.ToTable("AbbMeasurements");
                });

            modelBuilder.Entity("Mess.Ozds.Timeseries.SchneiderMeasurementEntity", b =>
                {
                    b.Property<string>("Tenant")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.Property<long?>("ActiveEnergyExportTotal_Wh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyImportRateA_Wh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyImportRateB_Wh")
                        .HasColumnType("int8");

                    b.Property<long?>("ActiveEnergyImportTotal_Wh")
                        .HasColumnType("int8");

                    b.Property<float?>("ActivePowerL1_kW")
                        .HasColumnType("float4");

                    b.Property<float?>("ActivePowerL2_kW")
                        .HasColumnType("float4");

                    b.Property<float?>("ActivePowerL3_kW")
                        .HasColumnType("float4");

                    b.Property<float?>("ActivePowerTotal_kW")
                        .HasColumnType("float4");

                    b.Property<float?>("ApparentPowerTotal_kVA")
                        .HasColumnType("float4");

                    b.Property<float?>("CurrentAvg_A")
                        .HasColumnType("float4");

                    b.Property<float?>("CurrentL1_A")
                        .HasColumnType("float4");

                    b.Property<float?>("CurrentL2_A")
                        .HasColumnType("float4");

                    b.Property<float?>("CurrentL3_A")
                        .HasColumnType("float4");

                    b.Property<long>("Milliseconds")
                        .HasColumnType("bigint");

                    b.Property<float?>("PowerFactorTotal")
                        .HasColumnType("float4");

                    b.Property<float?>("ReactivePowerTotal_kVAR")
                        .HasColumnType("float4");

                    b.Property<float?>("VoltageAvg_V")
                        .HasColumnType("float4");

                    b.Property<float?>("VoltageL1_V")
                        .HasColumnType("float4");

                    b.Property<float?>("VoltageL2_V")
                        .HasColumnType("float4");

                    b.Property<float?>("VoltageL3_V")
                        .HasColumnType("float4");

                    b.HasKey("Tenant", "Source", "Timestamp");

                    b.HasIndex("Tenant", "Source", "Milliseconds");

                    b.HasIndex("Tenant", "Source", "Timestamp");

                    b.ToTable("SchneiderMeasurements");
                });
#pragma warning restore 612, 618
        }
    }
}

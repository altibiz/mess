@using Mess.Prelude.Extensions.Objects
@using Mess.Chart.Abstractions.Services
@using Mess.Chart.Factories
@using Mess.Chart.Abstractions.Descriptors
@using OrchardCore.ContentManagement
@using Microsoft.Extensions.DependencyInjection
@inherits ShapeComponentBase<ChartPartViewModel>
@inject IContentManager contentManager

@if (ChartDescriptor is TimeseriesChartDescriptor timeseriesChartDescriptor &&
  timeseriesChartDescriptor.Datasets.Count > 0 &&
  timeseriesChartDescriptor.Datasets.All(dataset => dataset.Datapoints.Count > 0))
{
  var series = timeseriesChartDescriptor.Datasets
    .Select(dataset => new ChartSeries() {
      Name = dataset.Label,
      Data = dataset.Datapoints.Select(datapoint => (double)datapoint.Y).ToArray()
    })
    .ToList();
  var xAxisLabels = timeseriesChartDescriptor.Datasets.FirstOrDefault()
    ?.Datapoints.Select(datapoint => datapoint.X.ToString())
    .ToArray() ?? Array.Empty<string>();

  <MudChart
    ChartType="ChartType.Line"
    ChartSeries="@series"
    XAxisLabels="@xAxisLabels"
    Width="100%"
    Height="350px" />
}

@code {
  private ChartDescriptor? ChartDescriptor;

  protected override async Task OnInitializedAsync()
  {
    ContentItem metadataContentItem = Model.Part.ContentItem;
    var chartContentItem = await contentManager.GetAsync(
      Model.ChartContentItemId,
      VersionOptions.Latest
    ) ?? throw new InvalidOperationException("Chart is null");

    var chartFactory = ServiceProvider
      .GetServices<IChartFactory>()
      .FirstOrDefault(
        chartFactory =>
          chartFactory.ContentType == metadataContentItem.ContentType
      )!;
    ChartDescriptor =  await chartFactory.CreateChartAsync(
      metadataContentItem,
      chartContentItem
    )!;
  }
}

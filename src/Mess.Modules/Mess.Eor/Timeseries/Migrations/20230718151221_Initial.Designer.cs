// <auto-generated />
using System;
using System.Collections.Generic;
using Mess.Eor.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mess.Eor.Timeseries.Migrations
{
    [DbContext(typeof(EorTimeseriesDbContext))]
    [Migration("20230718151221_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "eor_diode_bridge_state", new[] { "error", "ok" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "eor_door_state", new[] { "closed", "open" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "eor_main_circuit_breaker_state", new[] { "on", "off" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "eor_measurement_device_reset_state", new[] { "shouldnt_reset", "should_reset" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "eor_measurement_device_run_state", new[] { "stopped", "started", "error" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "eor_transformer_contractor_state", new[] { "on", "off" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mess.Eor.Entities.EorMeasurementEntity", b =>
                {
                    b.Property<string>("Tenant")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("CoolingFans")
                        .HasColumnType("boolean");

                    b.Property<float>("Current")
                        .HasColumnType("float4");

                    b.Property<bool>("HatsinkFans")
                        .HasColumnType("boolean");

                    b.Property<float>("Temperature")
                        .HasColumnType("float4");

                    b.Property<float>("Voltage")
                        .HasColumnType("float4");

                    b.HasKey("Tenant", "Source", "Timestamp");

                    b.HasIndex("Tenant", "Source", "Timestamp");

                    b.ToTable("EorMeasurements");
                });

            modelBuilder.Entity("Mess.Eor.Entities.EorStatusEntity", b =>
                {
                    b.Property<string>("Tenant")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamptz");

                    b.Property<int>("CommunicationFault")
                        .HasColumnType("integer");

                    b.Property<bool>("CoolingFans")
                        .HasColumnType("boolean");

                    b.Property<float>("Current")
                        .HasColumnType("float4");

                    b.Property<int>("DoorState")
                        .HasColumnType("integer");

                    b.Property<int>("FirstDiodeBridgeState")
                        .HasColumnType("integer");

                    b.Property<bool>("HeatsinkFans")
                        .HasColumnType("boolean");

                    b.Property<int>("MainCircuitBreakerState")
                        .HasColumnType("integer");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.Property<int>("ProcessFault")
                        .HasColumnType("integer");

                    b.Property<List<string>>("ProcessFaults")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("ResetState")
                        .HasColumnType("integer");

                    b.Property<int>("RunState")
                        .HasColumnType("integer");

                    b.Property<int>("SecondDiodeBridgeState")
                        .HasColumnType("integer");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<int>("TransformerContractorState")
                        .HasColumnType("integer");

                    b.Property<float>("Voltage")
                        .HasColumnType("float4");

                    b.HasKey("Tenant", "Source", "Timestamp");

                    b.HasIndex("Tenant", "Source", "Timestamp");

                    b.ToTable("EorStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}

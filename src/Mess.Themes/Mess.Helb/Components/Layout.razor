@using Microsoft.AspNetCore.Html
@using OrchardCore.ResourceManagement

@* TODO: get pages and make breadcrumbs by crawling through assemblies *@

@inherits LayoutShapeComponentBase
@inject NavigationManager _navigationManager

@inject IResourceManager resourceManager

<HeadContent>
  @{
    var siteName = Site?.SiteName;
    if (siteName is not null) {
      <title>
        @RenderTitleSegments(siteName, "before");
      </title>
    }
  }

  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  @HeadMeta

  @Meta
  @HeadLink
  @HeadScript
  @Stylesheet
</HeadContent>

<header>
  @if (IsSectionDefined("Messages"))
  {
    @Messages
  }
</header>

<main>
  <MudThemeProvider Theme="_themeManager.Theme" />
  <MudDialogProvider />
  <MudSnackbarProvider />
@if(_user is not null){
  <MudLayout>
    <MudAppBar Elevation="4">
      <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton
          Icon="@Icons.Material.Outlined.Menu"
          Color="Color.Inherit"
          Edge="Edge.Start"
          OnClick="e => DrawerToggle()" />
      </MudHidden>
      <MudHidden Breakpoint="Breakpoint.Xs">
        <MudText Typo="Typo.h6">Dashboard</MudText>
      </MudHidden>
      <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
        <MudText Typo="Typo.subtitle2">Dashboard</MudText>
      </MudHidden>
      <MudSpacer />
      <MudMenu AnchorOrigin="Origin.CenterLeft" Dense="true" Class="mt-1 ml-4">
        <ActivatorContent>
          <MudIcon Icon="@Icons.Material.Filled.Person" />
        </ActivatorContent>
        <ChildContent>
          <MudListItem Text="Account" Icon="@Icons.Material.Outlined.Person" Href="app/account" />
          <MudListItem Text="Logout" Icon="@Icons.Material.Outlined.Login" Href="login" />
        </ChildContent>
      </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="_themeManager.DrawerClipMode">
      <MudNavMenu>
        @foreach(var site in _allowedSites){
          if(_user.RoleNames.Any(element => site.roles.Contains(element))){
            <MudNavLink Href="@site.url" Icon="@site.icon">@site.name</MudNavLink>
          }
        }
    </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
      <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudToolBar DisableGutters="true">
          <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
          <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
          <MudSpacer />
        </MudToolBar>
      </MudHidden>
      <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
        @Body
      </MudContainer>
    </MudMainContent>
  </MudLayout>

}
</main>

<footer>
  @Footer
</footer>

@FootScript

@code {
    public bool _drawerOpen = true;

    private RenderFragment? HeadMeta { get; set; }
    private RenderFragment? Messages { get; set; }
    private RenderFragment? Footer { get; set; }


    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();

    private OrchardCore.Users.Models.User? _user;

  // TODO: Make this not be hardcoaded
  public string[] _roles = new string[] {"Administrator", "DistributionSystemOperatorRepresentative", "ClosedDistributionSystemRepresentative", "DistributionSystemUnitRepresentative"};
  private List<(string url, string name, string icon, List<string> roles)> _allowedSites = new List<(string, string, string, List<string>)>{
    ("/ozds/login", "Log in", Icons.Material.Outlined.Login,  new List<string>{"Administrator", "DistributionSystemOperatorRepresentative", "ClosedDistributionSystemRepresentative", "DistributionSystemUnitRepresentative"}),
    ("/ozds/app/omm", "OMM", Icons.Material.Outlined.AddCircleOutline,  new List<string>{"Administrator", "DistributionSystemOperatorRepresentative", "ClosedDistributionSystemRepresentative", "DistributionSystemUnitRepresentative"}),
    ("/ozds/app/units", "Units", Icons.Material.Outlined.AccountTree, new List<string>{"ClosedDistributionSystemRepresentative", "DistributionSystemOperatorRepresentative"}),
    ("/ozds/app/tenants", "Tenants", Icons.Material.Outlined.AccountTree, new List<string>{"ClosedDistributionSystemRepresentative", "DistributionSystemUnitRepresentative"}),
    ("/ozds/app/owners", "Owners", Icons.Material.Outlined.AccountTree, new List<string>{"DistributionSystemOperatorRepresentative"}),
    ("/ozds/app/sysusage", "System Usage", Icons.Material.Outlined.AttachMoney, new List<string>{"DistributionSystemOperatorRepresentative", "ClosedDistributionSystemRepresentative"}),
    ("/ozds/admin", "Admin", Icons.Material.Outlined.VerifiedUser, new List<string>{"Administrator"}),
  };

  private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
  {
    new BreadcrumbItem("App", href: "app"),
  };

  protected override void OnLayoutInitialized()
  {
    _themeManager.Theme = new HelbMudTheme();
    _themeManager.DrawerClipMode = DrawerClipMode.Always;
    _themeManager.FontFamily = "Roboto";
    _themeManager.DefaultBorderRadius = 3;
  }

  protected override async Task OnLayoutInitializedAsync() {
    await WithTransientSessionAsync(async session => {
    try{
      _user = await this.GetAuthenticatedOrchardCoreUserAsync();
    }
    catch{
      RedirectLogin();
    }

    });
    HeadMeta = await RenderSectionAsync("HeadMeta", false);
    Messages = await RenderSectionAsync("Messages", false);
    Footer = await RenderSectionAsync("Footer", false);
  }


  private void RedirectLogin()
  {
    try{
      _navigationManager.NavigateTo("/ozds/login", forceLoad: true);
    }
    catch{}
  }

  void DrawerToggle()
  {
    _drawerOpen = !_drawerOpen;
  }
}

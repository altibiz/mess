@using Microsoft.AspNetCore.Html
@using OrchardCore.ResourceManagement

@inherits LayoutShapeComponentBase

@inject IResourceManager resourceManager

<HeadContent>
  @{
    var siteName = Site?.SiteName;
    if (siteName is not null) {
      <title>
        @RenderTitleSegments(siteName, "before");
      </title>
    }
  }

  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  @HeadMeta

  @Meta
  @HeadLink
  @HeadScript
  @Stylesheet
</HeadContent>

<header>
  @if (IsSectionDefined("Messages"))
  {
    @Messages
  }
</header>

<main>
  <MudThemeProvider Theme="_themeManager.Theme" />
  <MudDialogProvider />
  <MudSnackbarProvider />

  <MudLayout>
    <MudAppBar Elevation="4">
      <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton
          Icon="@Icons.Material.Outlined.Menu"
          Color="Color.Inherit"
          Edge="Edge.Start"
          OnClick="e => DrawerToggle()" />
      </MudHidden>
      <MudHidden Breakpoint="Breakpoint.Xs">
        <MudText Typo="Typo.h6">Dashboard</MudText>
      </MudHidden>
      <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
        <MudText Typo="Typo.subtitle2">Dashboard</MudText>
      </MudHidden>
      <MudSpacer />
      <MudMenu AnchorOrigin="Origin.CenterLeft" Dense="true" Class="mt-1 ml-4">
        <ActivatorContent>
          <MudIcon Icon="@Icons.Material.Filled.Person" />
        </ActivatorContent>
        <ChildContent>
          <MudListItem Text="Account" Icon="@Icons.Material.Outlined.Person" Href="app/account" />
          <MudListItem Text="Logout" Icon="@Icons.Material.Outlined.Login" Href="login" />
        </ChildContent>
      </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="_themeManager.DrawerClipMode">
      <MudNavMenu>
      <MudNavLink Href="app" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Dashboard">Dashboard</MudNavLink>
      <MudNavLink Href="app/systems" Icon="@Icons.Material.Outlined.Hub">Systems</MudNavLink>
    </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
      <MudHidden Breakpoint="Breakpoint.SmAndDown">
        <MudToolBar DisableGutters="true">
          <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
          <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
          <MudSpacer />
        </MudToolBar>
      </MudHidden>
      <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
        @Body
      </MudContainer>
    </MudMainContent>
  </MudLayout>
</main>

<footer>
  @Footer
</footer>

@FootScript

@code {
  public bool _drawerOpen = true;
  public bool _themeManagerOpen = false;

  private RenderFragment? HeadMeta { get; set; }
  private RenderFragment? Messages { get; set; }
  private RenderFragment? Footer { get; set; }

  private ThemeManagerTheme _themeManager = new ThemeManagerTheme();

  private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
  {
    new BreadcrumbItem("Personal", href: "#"),
    new BreadcrumbItem("Dashboard", href: "#"),
  };

  private string AlertAssignmentIcon { get; set; } = "<path d=\"M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3H9.18C9.6,1.84 10.7,1 12,1C13.3,1 14.4,1.84 14.82,3H19M12,3A1,1 0 0,0 11,4A1,1 0 0,0 12,5A1,1 0 0,0 13,4A1,1 0 0,0 12,3M7,7V5H5V19H19V5H17V7H7M11,9H13V13.5H11V9M11,15H13V17H11V15Z\" />";

  protected override void OnLayoutInitialized()
  {
    _themeManager.Theme = new HelbMudTheme();
    _themeManager.DrawerClipMode = DrawerClipMode.Always;
    _themeManager.FontFamily = "Roboto";
    _themeManager.DefaultBorderRadius = 3;
  }

  protected override async Task OnLayoutInitializedAsync() {
    HeadMeta = await RenderSectionAsync("HeadMeta", false);
    Messages = await RenderSectionAsync("Messages", false);
    Footer = await RenderSectionAsync("Footer", false);
  }

  void DrawerToggle()
  {
    _drawerOpen = !_drawerOpen;
  }

  void OpenThemeManager(bool value)
  {
    _themeManagerOpen = value;
  }

  void UpdateTheme(ThemeManagerTheme value)
  {
    _themeManager = value;
    StateHasChanged();
  }
}
